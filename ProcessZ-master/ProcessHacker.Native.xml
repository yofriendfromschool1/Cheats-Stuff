<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ProcessHacker.Native</name>
    </assembly>
    <members>
        <member name="T:ProcessHacker.Native.Api.Win32">
            <summary>
            Provides interfacing to the Win32 and Native APIs.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Api.Win32.NtCreateProfile(System.IntPtr@,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,ProcessHacker.Native.Api.KProfileSource,System.IntPtr)">
            <summary>
            Creates a profile object.
            </summary>
            <param name="ProfileHandle">A handle to the profile object.</param>
            <param name="ProcessHandle">
            A handle to the process to profile. If NULL, all address spaces are profiled.
            </param>
            <param name="ProfileBase">
            The first address at which to collect profiling information.
            </param>
            <param name="ProfileSize">
            The size of the range to profile. ProfileBase &lt;= address &lt; 
            ProfileBase + ProfileSize will generate a hit.
            </param>
            <param name="BucketSize">
            A log2 value of each address bucket. Acceptable values are from 2 to 30.
            </param>
            <param name="Buffer">An array of int hit counters.</param>
            <param name="BufferSize">The size of the buffer, in bytes.</param>
            <param name="ProfileSource">The profiling source.</param>
            <param name="Affinity">The processors to profile.</param>
            <returns>A NTSTATUS value.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Api.Win32.NtSetTimer(System.IntPtr,System.Int64@,ProcessHacker.Native.Api.TimerApcRoutine,System.IntPtr,System.Boolean,System.Int32,System.Boolean@)">
            <param name="Period">Period, in milliseconds.</param>
        </member>
        <member name="M:ProcessHacker.Native.Api.Win32.AddERExcludedApplication(System.String)">
            <summary>
            Removes an Application from Windows Error Reporting on Windows XP
            </summary>
            <param name="ExeName">The process.exe or the path\process.exe to be excluded</param>
            <returns>True if successfully excluded</returns>
        </member>
        <member name="M:ProcessHacker.Native.Api.Win32.WerAddExcludedApplication(System.String,System.Boolean)">
            <summary>
            Removes an Application from Windows Error Reporting on Windows Vista
            </summary>
            <param name="ExeName">The process.exe or the path\process.exe to be excluded</param>
            <param name="AllUsers">true to exclude process from all users. Note: Administrator access is Required if set true</param>
            <returns>A HResult indicating the result</returns>
        </member>
        <member name="M:ProcessHacker.Native.Api.Win32.InternetCheckConnection(System.String,System.Int32,System.Int32)">
            <summary>
            Allows an application to check if a connection to the Internet can be established.
            </summary>
            <param name="Url">A string that specifies the URL to use for checking the connection.</param>
            <param name="Flags">Forces a connection, must be 1.</param>
            <param name="Reserved">This parameter is reserved and must be 0.</param>
            <returns></returns>
        </member>
        <member name="M:ProcessHacker.Native.Api.Win32.NdfCancelIncident(System.IntPtr)">
            <summary>
            The NdfCancelIncident function is used to cancel unneeded functions which have been previously called on an existing incident.
            </summary>
            <remarks>Before using this API, an application must call an incident creation function such as NdfCreateWebIncident.
            NdfCloseIncident should be used to close an incident once it has been resolved, as NdfCancelIncident does not actually close the incident itself.
            </remarks>
            <param name="NdfHandle">A handle to the Network Diagnostics Framework incident. 
            This handle should match the handle of an existing incident.</param>
            <returns>A HResult value indicating the result</returns>
        </member>
        <member name="M:ProcessHacker.Native.Api.Win32.NdfCloseIncident(System.IntPtr)">
            <summary>
            The NdfCloseIncident function is used to close an Network Diagnostics Framework (NDF) incident following its resolution.
            </summary>
            <param name="NdfHandle">The handle to the NDF incident that is being closed.</param>
            <returns>A HResult value indicating the result</returns>
        </member>
        <member name="M:ProcessHacker.Native.Api.Win32.NdfCreateConnectivityIncident(System.IntPtr@)">
            <summary>
            The NdfCreateConnectivityIncident function diagnoses generic internet connectivity problems.
            </summary>
            <param name="NdfHandle">The handle to the Network Diagnostics Framework incident.</param>
            <returns>A HResult value indicating the result</returns>
        </member>
        <member name="M:ProcessHacker.Native.Api.Win32.NdfCreateInboundIncident(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr@)">
            <summary>
            The NdfCreateInboundIncident function creates a session to diagnose inbound connectivity for a specific application or service.
            </summary>
            <param name="applicationID">The fully qualified path to the application receiving the inbound traffic.</param>
            <param name="serviceID">The Windows service receiving the inbound traffic.</param>
            <param name="userID">The SID for the application receiving the traffic. If NULL, the caller's SID is automatically used.</param>
            <param name="localTarget">A SOCKADDR_STORAGE structure which limits the diagnosis to traffic to a specific IP address. If NULL, all traffic will be included in the diagnosis</param>
            <param name="protocol">The protocol which should be diagnosed. For example, IPPROTO_TCP would be used to indicate the TCP/IP protocol.</param>
            <param name="dwFlags">The Inbound flags for specifying the type of options to preform during diagnostics.</param>
            <param name="NdfHandle">Pointer to a handle to the Network Diagnostics Framework incident.</param>
            <returns>A HResult value indicating the result</returns>
        </member>
        <member name="M:ProcessHacker.Native.Api.Win32.NdfCreateDNSIncident(System.String,System.UInt16,System.IntPtr@)">
            <summary>
            The NdfCreateDNSIncident function diagnoses name resolution issues in resolving a specific host name.
            </summary>
            <param name="hostname">The host name with which there is a name resolution issue.</param>
            <param name="querytype">The numeric representation of the type of record that was queried when the issue occurred.</param>
            <param name="NdfHandle">A handle to the Network Diagnostics Framework incident.</param>
            <returns>A HResult value indicating the result</returns>
        </member>
        <member name="M:ProcessHacker.Native.Api.Win32.NdfCreateSharingIncident(System.String,System.IntPtr@)">
            <summary>
            The NdfCreateSharingIncident function diagnoses network problems in accessing a specific network share.
            </summary>
            <param name="shareName">The full UNC string (for example, "\\server\folder\file.ext")for the shared asset with which there is a connectivity issue.</param>
            <param name="NdfHandle">A handle to the Network Diagnostics Framework incident.</param>
            <returns>A HResult value indicating the result</returns>
        </member>
        <member name="M:ProcessHacker.Native.Api.Win32.NdfCreateWebIncident(System.String,System.IntPtr@)">
            <summary>
            The NdfCreateWebIncident function diagnoses web connectivity problems concerning a specific URL.
            </summary>
            <param name="url">The URL with which there is a connectivity issue.</param>
            <param name="NdfHandle">A handle to the Network Diagnostics Framework incident.</param>
            <returns>A HResult value indicating the result</returns>
        </member>
        <member name="M:ProcessHacker.Native.Api.Win32.NdfCreateWebIncidentEx(System.String,System.Boolean,System.String,System.IntPtr@)">
            <summary>
            The NdfCreateWebIncidentEx function diagnoses web connectivity problems concerning a specific URL. This function allows for more control over the underlying diagnosis than the NdfCreateWebIncident function.
            </summary>
            <param name="url">The URL with which there is a connectivity issue.</param>
            <param name="useWinHTTP">If TRUE, diagnosis is performed using the WinHTTP APIs. Otherwise, the WinInet APIs are used. </param>
            <param name="moduleName">The module name to use when checking against application-specific filtering rules (for example, "C:\Program Files\Internet Explorer\iexplorer.exe"). If NULL, the value is autodetected during the diagnosis.</param>
            <param name="NdfHandle">A handle to the Network Diagnostics Framework incident.</param>
            <returns>A HResult value indicating the result</returns>
        </member>
        <member name="M:ProcessHacker.Native.Api.Win32.NdfExecuteDiagnosis(System.IntPtr,System.IntPtr)">
            <summary>
            The NdfExecuteDiagnosis function is used to diagnose the root cause of the incident that has occurred.
            </summary>
            <param name="NdfHandle">A handle to the Network Diagnostics Framework incident.</param>
            <param name="hwnd">The handle to the window that is intended to display the diagnostic information. If specified, the NDF UI is modal to the window. If NULL, the UI is non-modal.</param>
            <returns>A HResult value indicating the result</returns>
        </member>
        <member name="M:ProcessHacker.Native.Api.Win32.NdfGetTraceFile(System.IntPtr,System.String)">
            <summary>
            The NdfGetTraceFile function is used to retrieve the path containing an Event Trace Log (ETL) file that contains Event Tracing for Windows (ETW) events from a diagnostic session.
            </summary>
            <param name="NdfHandle">A handle to a Network Diagnostics Framework incident. This handle should match the handle of an existing incident.</param>
            <param name="TraceFileLocation">Pointer to a string that contains the location of the trace file.</param>
            <returns>A HResult value indicating the result</returns>
        </member>
        <member name="M:ProcessHacker.Native.Api.Win32.EnumServicesStatusEx(System.IntPtr,System.IntPtr,ProcessHacker.Native.Api.ServiceQueryType,ProcessHacker.Native.Api.ServiceQueryState,System.IntPtr,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.String)">
            <summary>
            Enumerates services in the specified service control manager database. 
            The name and status of each service are provided, along with additional 
            data based on the specified information level.
            </summary>
            <param name="SCManager">A handle to the service control manager database.</param>
            <param name="InfoLevel">Set this to 0.</param>
            <param name="ServiceType">The type of services to be enumerated.</param>
            <param name="ServiceState">The state of the services to be enumerated.</param>
            <param name="Services">A pointer to the buffer that receives the status information.</param>
            <param name="BufSize">The size of the buffer pointed to by the Services parameter, in bytes.</param>
            <param name="BytesNeeded">A pointer to a variable that receives the number of bytes needed to 
            return the remaining service entries, if the buffer is too small.</param>
            <param name="ServicesReturned">A pointer to a variable that receives the number of service 
            entries returned.</param>
            <param name="ResumeHandle">A pointer to a variable that, on input, specifies the 
            starting point of enumeration. You must set this value to zero the first time the 
            EnumServicesStatusEx function is called.</param>
            <param name="GroupName">Must be 0 for this definition.</param>
            <returns>A non-zero value for success, zero for failure.</returns>
        </member>
        <member name="P:ProcessHacker.Native.Api.Win32.DbgHelpLock">
            <summary>
            A mutex which controls access to the dbghelp.dll functions.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Api.Win32.GetLastErrorMessage">
            <summary>
            Gets the error message associated with the last error that occured.
            </summary>
            <returns>An error message.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Api.Win32.Throw">
            <summary>
            Throws a WindowsException with the last error that occurred.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Api.Win32.GetMultiString(System.IntPtr)">
            <summary>
            Converts a multi-string into a managed string array. A multi-string 
            consists of an array of null-terminated strings plus an extra null to 
            terminate the array.
            </summary>
            <param name="ptr">The pointer to the array.</param>
            <returns>A string array.</returns>
        </member>
        <member name="T:ProcessHacker.Native.Api.ContextFlagsGeneric">
            <summary>
            Generic context-related flags.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Api.ContextFlags">
            <summary>
            x86 context.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Api.ContextFlagsAmd64">
            <summary>
            AMD64 context.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageBaseRelocationType.Absolute">
            <summary>
            The base relocation is skipped. This type can be used to pad a block.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageBaseRelocationType.High">
            <summary>
            The base relocation adds the high 16 bits of the difference to the 16-bit 
            field at offset. The 16-bit field represents the high value of a 32-bit word.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageBaseRelocationType.Low">
            <summary>
            The base relocation adds the low 16 bits of the difference to the 16-bit 
            field at offset. The 16-bit field represents the low half of a 32-bit word. 
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageBaseRelocationType.HighLow">
            <summary>
            The base relocation applies all 32 bits of the difference to the 32-bit 
            field at offset.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageBaseRelocationType.HighAdj">
            <summary>
            The base relocation adds the high 16 bits of the difference to the 16-bit 
            field at offset. The 16-bit field represents the high value of a 32-bit word. 
            The low 16 bits of the 32-bit value are stored in the 16-bit word that follows 
            this base relocation. This means that this base relocation occupies two slots.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageBaseRelocationType.MipsJmpAddr">
            <summary>
            The base relocation applies to a MIPS jump instruction.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageBaseRelocationType.MipsJmpAddr16">
            <summary>
            The base relocation applies to a MIPS16 jump instruction.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageBaseRelocationType.Dir16">
            <summary>
            The base relocation applies the difference to the 64-bit field at offset.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageCharacteristics.RelocsStripped">
            <summary>
            Image only, Windows CE, and Windows NT® and later. This indicates that the file does 
            not contain base relocations and must therefore be loaded at its preferred base address. 
            If the base address is not available, the loader reports an error. The default behavior 
            of the linker is to strip base relocations from executable (EXE) files.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageCharacteristics.ExecutableImage">
            <summary>
            Image only. This indicates that the image file is valid and can be run. If this flag 
            is not set, it indicates a linker error.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageCharacteristics.LineNumsStripped">
            <summary>
            COFF line numbers have been removed. This flag is deprecated and should be zero.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageCharacteristics.LocalSymsStripped">
            <summary>
            COFF symbol table entries for local symbols have been removed. This flag is deprecated 
            and should be zero.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageCharacteristics.AggressiveWsTrim">
            <summary>
            Obsolete. Aggressively trim working set. This flag is deprecated for Windows 2000 and later 
            and must be zero.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageCharacteristics.LargeAddressAware">
            <summary>
            Application can handle > 2 GB addresses.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageCharacteristics.Reserved">
            <summary>
            This flag is reserved for future use.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageCharacteristics.BytesReversedLo">
            <summary>
            Little endian: the least significant bit (LSB) precedes the most significant bit (MSB) in 
            memory. This flag is deprecated and should be zero.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageCharacteristics.ThirtyTwoBitMachine">
            <summary>
            Machine is based on a 32-bit-word architecture.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageCharacteristics.DebugStripped">
            <summary>
            Debugging information is removed from the image file.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageCharacteristics.RemovableRunFromSwap">
            <summary>
            If the image is on removable media, fully load it and copy it to the swap file.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageCharacteristics.NetRunFromSwap">
            <summary>
            If the image is on network media, fully load it and copy it to the swap file.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageCharacteristics.System">
            <summary>
            The image file is a system file, not a user program.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageCharacteristics.DLL">
            <summary>
            The image file is a dynamic-link library (DLL). Such files are considered 
            executable files for almost all purposes, although they cannot be directly run.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageCharacteristics.UPSystemOnly">
            <summary>
            The file should be run only on a uniprocessor machine.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageCharacteristics.BytesReversedHi">
            <summary>
            Big endian: the MSB precedes the LSB in memory. This flag is deprecated and should be zero.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.Reserved1">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.Reserved2">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.Reserved3">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.Reserved4">
            <summary>
            Reserved, must be zero.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.NoPad">
            <summary>
            The section should not be padded to the next boundary. 
            This flag is obsolete and is replaced by IMAGE_SCN_ALIGN_1BYTES. 
            This is valid only for object files.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.Code">
            <summary>
            The section contains executable code.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.InitializedData">
            <summary>
            The section contains initialized data.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.UninitializedData">
            <summary>
            The section contains uninitialized data.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.Other">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.Info">
            <summary>
            The section contains comments or other information. The 
            .drectve section has this type. This is valid for object 
            files only.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.Reserved5">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.Remove">
            <summary>
            The section will not become part of the image. This is valid 
            only for object files.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.COMDAT">
            <summary>
            The section contains COMDAT data. 
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.GPRel">
            <summary>
            The section contains data referenced through the global pointer (GP).
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.MemoryPurgeable">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.Memory16Bit">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.MemoryLocked">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.MemoryPeload">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.NRelocOvfl">
            <summary>
            The section contains extended relocations.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.MemoryDiscardable">
            <summary>
            The section can be discarded as needed.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.MemoryNotCached">
            <summary>
            The section cannot be cached.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.MemoryNotPaged">
            <summary>
            The section is not pageable.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.MemoryShared">
            <summary>
            The section can be shared in memory.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.MemoryExecute">
            <summary>
            The section can be executed as code.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.MemoryRead">
            <summary>
            The section can be read.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ImageSectionFlags.MemoryWrite">
            <summary>
            The section can be written to.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Api.MachineType">
            <summary>
            Specifies an executable's target CPU type.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.MachineType.Unknown">
            <summary>
            Assumed to be applicable to any machine type.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.MachineType.Am33">
            <summary>
            Matsushita AM33.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.MachineType.Amd64">
            <summary>
            x64.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.MachineType.Arm">
            <summary>
            ARM little-endian.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.MachineType.Ebc">
            <summary>
            EFI byte code.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.MachineType.I386">
            <summary>
            Intel 386 or later processors and compatible processors.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.MachineType.Ia64">
            <summary>
            Intel Itanium processor family.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.MachineType.M32R">
            <summary>
            Mitsubishi M32R little endian.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.MachineType.Mips16">
            <summary>
            MIPS16.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.MachineType.MipsFpu">
            <summary>
            MIPS with FPU.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.MachineType.MipsFpu16">
            <summary>
            MIPS16 with FPU.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.MachineType.PowerPc">
            <summary>
            PowerPC little-endian.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.MachineType.PowerPcFp">
            <summary>
            PowerPC with floating point support.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.MachineType.R4000">
            <summary>
            MIPS little-endian.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.MachineType.Sh3">
            <summary>
            Hitachi SH3.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.MachineType.Sh3Dsp">
            <summary>
            Hitachi SH3 DSP.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.MachineType.Sh4">
            <summary>
            Hitachi SH4.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.MachineType.Sh5">
            <summary>
            Hitachi SH5.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.MachineType.Thumb">
            <summary>
            Thumb.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.MachineType.WceMipsv2">
            <summary>
            MIPS little-endian WCE v2.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Api.Context">
            <summary>
            x86 context
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Api.ContextAmd64">
            <summary>
            AMD64 context.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Api.Luid">
            <summary>
            Represents a locally unique identifier (LUID), a value which 
            is unique on the currently running system.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Api.Luid.#ctor(System.Int64)">
            <summary>
            Creates a LUID from a single 64-bit value.
            </summary>
            <param name="quadPart">The value.</param>
        </member>
        <member name="M:ProcessHacker.Native.Api.Luid.#ctor(System.UInt32,System.Int32)">
            <summary>
            Creates a LUID from two 32-bit values.
            </summary>
            <param name="lowPart">The low 32 bits of the LUID.</param>
            <param name="highPart">The high 32 bits of the LUID.</param>
        </member>
        <member name="F:ProcessHacker.Native.Api.Luid.QuadPart">
            <summary>
            The 64-bit value of the LUID.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.Luid.LowPart">
            <summary>
            The low 32 bits of the LUID.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.Luid.HighPart">
            <summary>
            The high 32 bits of the LUID.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Api.Luid.Allocate">
            <summary>
            Allocates a locally unique identifier (LUID) from 
            the kernel.
            </summary>
            <returns>A new LUID.</returns>
        </member>
        <member name="F:ProcessHacker.Native.Api.ResourceManagerBasicInformation.ResourceManagerId">
            <summary>
            The GUID assigned to the resource manager.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ResourceManagerBasicInformation.DescriptionLength">
            <summary>
            The length, in bytes, of the resource manager description string.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.ResourceManagerBasicInformation.Description">
            <summary>
            The first byte of the description string.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemCacheInformation.SystemCacheWsSize">
            <summary>
            The size of the system working set, in bytes.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemCacheInformation.SystemCacheWsMinimum">
            <summary>
            Measured in pages.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemCacheInformation.SystemCacheWsMaximum">
            <summary>
            Measured in pages.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.IdleProcessTime">
            <summary>
            The total idle time of all processors in units of 100-nanoseconds.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.IoReadTransferCount">
            <summary>
            Total bytes read by calls to NtReadFile.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.IoWriteTransferCount">
            <summary>
            Total bytes written by calls to NtWriteFile.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.IoOtherTransferCount">
            <summary>
            Total bytes transferred by other I/O operations.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.IoReadOperationCount">
            <summary>
            Number of calls to NtReadFile.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.IoWriteOperationCount">
            <summary>
            Number of calls to NtWriteFile.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.IoOtherOperationCount">
            <summary>
            Number of calls to other I/O functions.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.AvailablePages">
            <summary>
            The number of pages of physical memory available.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.CommittedPages">
            <summary>
            The number of pages of committed virtual memory.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.CommitLimit">
            <summary>
            The number of pages of virtual memory that could be committed 
            without extending the system's pagefiles.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.PeakCommitment">
            <summary>
            The peak number of pages of committed virtual memory.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.PageFaultCount">
            <summary>
            The total number of soft and hard page faults.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.CopyOnWriteCount">
            <summary>
            The number of copy-on-write page faults.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.TransitionCount">
            <summary>
            The number of soft page faults.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.CacheTransitionCount">
            <summary>
            Something that the Native API reference book doesn't have.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.DemandZeroCount">
            <summary>
            The number of demand zero faults.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.PageReadCount">
            <summary>
            The number of pages read from disk to resolve page faults.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.PageReadIoCount">
            <summary>
            The number of read operations initiated to resolve page faults.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.DirtyPagesWriteCount">
            <summary>
            The number of pages written to the system's pagefiles.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.DirtyWriteIoCount">
            <summary>
            The number of write operations performed on the system's pagefiles.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.MappedPagesWriteCount">
            <summary>
            The number of pages written to mapped files.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.MappedWriteIoCount">
            <summary>
            The number of write operations performed on mapped files.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.PagedPoolPages">
            <summary>
            The number of pages used by the paged pool.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.NonPagedPoolPages">
            <summary>
            The number of pages used by the non-paged pool.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.PagedPoolAllocs">
            <summary>
            The number of allocations made from the paged pool.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.PagedPoolFrees">
            <summary>
            The number of allocations returned to the paged pool.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.NonPagedPoolAllocs">
            <summary>
            The number of allocations made from the non-paged pool.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.NonPagedPoolFrees">
            <summary>
            The number of allocations returned to the non-paged pool.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.FreeSystemPtes">
            <summary>
            The number of available System Page Table Entries.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.ResidentSystemCodePage">
            <summary>
            The number of pages of pageable OS code and data in physical 
            memory.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.TotalSystemDriverPages">
            <summary>
            The number of pages of pageable driver code and data.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.TotalSystemCodePages">
            <summary>
            The number of pages of OS driver code and data.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.NonPagedPoolLookasideHits">
            <summary>
            The number of times an allocation could be statisfied by one of the 
            small non-paged lookaside lists.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.PagedPoolLookasideHits">
            <summary>
            The number of times an allocation could be statisfied by one of the 
            small paged lookaside lists.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.AvailablePagedPoolPages">
            <summary>
            The number of pages available for use by the paged pool.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.ResidentSystemCachePage">
            <summary>
            The number of pages of the system cache in physical memory.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.ResidentPagedPoolPage">
            <summary>
            The number of pages of the paged pool in physical memory.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.ResidentSystemDriverPage">
            <summary>
            The number of pages of pageable driver code and data in physical memory.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.CcFastReadNoWait">
            <summary>
            The number of asynchronous fast read operations.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.CcFastReadWait">
            <summary>
            The number of synchronous fast read operations.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.SystemPerformanceInformation.CcFastReadResourceMiss">
            <summary>
            The number of fast read operations not possible because of resource 
            conflicts.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.TmLogPathInformation.LogPathLength">
            <summary>
            The length, in bytes, of the log path string.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.TmLogPathInformation.LogPath">
            <summary>
            The first byte of the log path string.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.TransactionPropertiesInformation.DescriptionLength">
            <summary>
            The length, in bytes, of the description string.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.TransactionPropertiesInformation.Description">
            <summary>
            The first byte of the description string.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Api.UnicodeString.Duplicate">
            <summary>
            Copies the string to a newly allocated string.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Api.NtStatus">
            <summary>
            A NT status value.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Api.NtStatusExtensions.GetMessage(ProcessHacker.Native.Api.NtStatus)">
            <summary>
            Gets a string which describes the NT status value.
            </summary>
            <param name="status">The NT status value.</param>
            <returns>A message, or null if the message could not be retrieved.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Api.NtStatusExtensions.IsError(ProcessHacker.Native.Api.NtStatus)">
            <summary>
            Gets whether the NT status value indicates an error.
            </summary>
            <param name="status">The NT status value.</param>
        </member>
        <member name="M:ProcessHacker.Native.Api.NtStatusExtensions.IsInformational(ProcessHacker.Native.Api.NtStatus)">
            <summary>
            Gets whether the NT status value indicates information.
            </summary>
            <param name="status">The NT status value.</param>
        </member>
        <member name="M:ProcessHacker.Native.Api.NtStatusExtensions.IsSuccess(ProcessHacker.Native.Api.NtStatus)">
            <summary>
            Gets whether the NT status value indicates success.
            </summary>
            <param name="status">The NT status value.</param>
        </member>
        <member name="M:ProcessHacker.Native.Api.NtStatusExtensions.IsWarning(ProcessHacker.Native.Api.NtStatus)">
            <summary>
            Gets whether the NT status value indicates a warning.
            </summary>
            <param name="status">The NT status value.</param>
        </member>
        <member name="M:ProcessHacker.Native.Api.NtStatusExtensions.Throw(ProcessHacker.Native.Api.NtStatus)">
            <summary>
            Throws the NT status value as an exception.
            </summary>
            <param name="status">The NT status value.</param>
        </member>
        <member name="M:ProcessHacker.Native.Api.NtStatusExtensions.ThrowIf(ProcessHacker.Native.Api.NtStatus)">
            <summary>
            Throws the NT status value as an exception if it is an error or warning.
            </summary>
            <param name="status">The NT status value.</param>
        </member>
        <member name="M:ProcessHacker.Native.Api.NtStatusExtensions.ToDosError(ProcessHacker.Native.Api.NtStatus)">
            <summary>
            Converts the NT status value to a DOS/Windows error code.
            </summary>
            <param name="status">The NT status value.</param>
            <returns>A DOS/Windows error code.</returns>
        </member>
        <member name="T:ProcessHacker.Native.Api.Win32Error">
            <summary>
            A Win32 error code.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.AiFamily.Unspecified">
            <summary>
            The address family is unspecified.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.AiFamily.INet">
            <summary>
            The Internet Protocol version 4 (IPv4) address family.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.AiFamily.NetBios">
            <summary>
            The NetBIOS address family. This address family is only supported 
            if a Windows Sockets provider for NetBIOS is installed.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.AiFamily.INet6">
            <summary>
            The Internet Protocol version 6 (IPv6) address family.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.AiFamily.IrDA">
            <summary>
            The Infrared Data Association (IrDA) address family. This address 
            family is only supported if the computer has an infrared port and 
            driver installed.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.AiFamily.Bth">
            <summary>
            The Bluetooth address family. This address family is only supported 
            if a Bluetooth adapter is installed on Windows Server 2003 or later.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.FileCreationDispositionWin32.CreateNew">
            <summary>
            Creates a new file. The function fails if the specified file already exists.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.FileCreationDispositionWin32.CreateAlways">
            <summary>
            Creates a new file. If the file exists, the function overwrites the file and clears the existing attributes.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.FileCreationDispositionWin32.OpenExisting">
            <summary>
            Opens the file. The function fails if the file does not exist. 
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.FileCreationDispositionWin32.OpenAlways">
            <summary>
            Opens the file, if it exists. If the file does not exist, the function creates the file.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.FileCreationDispositionWin32.TruncateExisting">
            <summary>
            Opens the file. Once opened, the file is truncated so that its size is zero bytes. 
            The function fails if the file does not exist.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.MemoryState.Decommit">
            <summary>
            Decommits memory, putting it into the reserved state.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.MemoryState.Release">
            <summary>
            Frees memory, putting it into the freed state.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.RunFileDialogFlags.None">
            <summary>
            Don't use any of the flags (only works alone)
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.RunFileDialogFlags.NoBrowse">
            <summary>
            Removes the browse button
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.RunFileDialogFlags.NoDefault">
            <summary>
            No default item selected
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.RunFileDialogFlags.CalcDirectory">
            <summary>
            Calculates the working directory from the file name
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.RunFileDialogFlags.NoLabel">
            <summary>
            Removes the edit box label
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Api.RunFileDialogFlags.NoSeparateMemory">
            <summary>
            Removes the separate memory space checkbox (Windows NT only)
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Io.MountManager.GetDeviceName(System.String)">
            <summary>
            Gets the device name associated with the specified file name.
            </summary>
            <param name="fileName">
            A file name referring to a DOS drive. For example: "\??\C:" (no 
            trailing backslash).
            </param>
            <returns>The device name associated with the DOS drive.</returns>
        </member>
        <member name="T:ProcessHacker.Native.SamMemoryAlloc">
            <summary>
            Represents a memory allocation managed by the Security Accounts Manager (SAM).
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.SamMemoryAlloc.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Creates a memory allocation from an existing SAM managed allocation. 
            </summary>
            <param name="memory">A pointer to the allocated memory.</param>
            <param name="owned">Whether the memory allocation should be freed automatically.</param>
        </member>
        <member name="T:ProcessHacker.Native.Debugging.DebugBuffer">
            <summary>
            Represents a debug buffer managed by the run-time library.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Debugging.DebugBuffer.#ctor">
            <summary>
            Creates a new debug buffer.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Debugging.DebugBuffer.EnumHeaps(ProcessHacker.Native.Debugging.DebugEnumHeapsDelegate)">
            <summary>
            Enumerates heap information.
            </summary>
            <param name="callback">The callback for the enumeration.</param>
        </member>
        <member name="M:ProcessHacker.Native.Debugging.DebugBuffer.EnumLocks(ProcessHacker.Native.Debugging.DebugEnumLocksDelegate)">
            <summary>
            Enumerates lock information.
            </summary>
            <param name="callback">The callback for the enumeration.</param>
        </member>
        <member name="M:ProcessHacker.Native.Debugging.DebugBuffer.EnumModules(ProcessHacker.Native.Debugging.DebugEnumModulesDelegate)">
            <summary>
            Enumerates module information.
            </summary>
            <param name="callback">The callback for the enumeration.</param>
        </member>
        <member name="M:ProcessHacker.Native.Debugging.DebugBuffer.GetDebugInformation">
            <summary>
            Reads the debug information structure from the buffer.
            </summary>
            <returns>A RtlDebugInformation structure.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Debugging.DebugBuffer.GetHeaps">
            <summary>
            Gets heap information.
            </summary>
            <returns>An array of heap information objects.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Debugging.DebugBuffer.GetLocks">
            <summary>
            Gets lock information.
            </summary>
            <returns>An array of lock information objects.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Debugging.DebugBuffer.GetModules">
            <summary>
            Gets module information.
            </summary>
            <returns>An array of module information objects.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Debugging.DebugBuffer.Query(ProcessHacker.Native.Api.RtlQueryProcessDebugFlags)">
            <summary>
            Queries debug information for the current process.
            </summary>
            <param name="flags">The information to query.</param>
        </member>
        <member name="M:ProcessHacker.Native.Debugging.DebugBuffer.Query(System.Int32,ProcessHacker.Native.Api.RtlQueryProcessDebugFlags)">
            <summary>
            Queries debug information for the specified process.
            </summary>
            <param name="pid">The PID of the process to query.</param>
            <param name="flags">The information to query.</param>
        </member>
        <member name="M:ProcessHacker.Native.Debugging.DebugBuffer.QueryBackTraces">
            <summary>
            Queries back trace information for the current process.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Debugging.DebugBuffer.QueryHeaps">
            <summary>
            Queries heap information for the current process.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Debugging.DebugBuffer.QueryLocks">
            <summary>
            Queries lock information for the current process.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.MemoryRegion.#ctor">
            <summary>
            Creates a new, invalid memory allocation. 
            You must set the pointer using the Memory property.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.MemoryRegion.Memory">
            <summary>
            Gets a pointer to the allocated memory.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.MemoryRegion.Size">
            <summary>
            Gets the size of the allocated memory.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.MemoryRegion.ReadInt32(System.Int32)">
            <summary>
            Reads a signed integer.
            </summary>
            <param name="offset">The offset at which to begin reading.</param>
            <returns>The integer.</returns>
        </member>
        <member name="M:ProcessHacker.Native.MemoryRegion.ReadInt32(System.Int32,System.Int32)">
            <summary>
            Reads a signed integer.
            </summary>
            <param name="offset">The offset at which to begin reading.</param>
            <param name="index">The index at which to begin reading, after the offset is added.</param>
            <returns>The integer.</returns>
        </member>
        <member name="M:ProcessHacker.Native.MemoryRegion.ReadUInt32(System.Int32)">
            <summary>
            Reads an unsigned integer.
            </summary>
            <param name="offset">The offset at which to begin reading.</param>
            <returns>The integer.</returns>
        </member>
        <member name="M:ProcessHacker.Native.MemoryRegion.ReadUInt32(System.Int32,System.Int32)">
            <summary>
            Reads an unsigned integer.
            </summary>
            <param name="offset">The offset at which to begin reading.</param>
            <param name="index">The index at which to begin reading, after the offset is added.</param>
            <returns>The integer.</returns>
        </member>
        <member name="M:ProcessHacker.Native.MemoryRegion.ReadStruct``1">
            <summary>
            Creates a struct from the memory allocation.
            </summary>
            <typeparam name="T">The type of the struct.</typeparam>
            <returns>The new struct.</returns>
        </member>
        <member name="M:ProcessHacker.Native.MemoryRegion.ReadStruct``1(System.Int32)">
            <summary>
            Creates a struct from the memory allocation.
            </summary>
            <typeparam name="T">The type of the struct.</typeparam>
            <param name="index">The index at which to begin reading to the struct. This is multiplied by  
            the size of the struct.</param>
            <returns>The new struct.</returns>
        </member>
        <member name="M:ProcessHacker.Native.MemoryRegion.ReadStruct``1(System.Int32,System.Int32)">
            <summary>
            Creates a struct from the memory allocation.
            </summary>
            <typeparam name="T">The type of the struct.</typeparam>
            <param name="offset">The offset to add before reading.</param>
            <param name="index">The index at which to begin reading to the struct. This is multiplied by  
            the size of the struct.</param>
            <returns>The new struct.</returns>
        </member>
        <member name="M:ProcessHacker.Native.MemoryRegion.WriteByte(System.Int32,System.Byte)">
            <summary>
            Writes a single byte to the memory allocation.
            </summary>
            <param name="offset">The offset at which to write.</param>
            <param name="b">The value of the byte.</param>
        </member>
        <member name="M:ProcessHacker.Native.MemoryRegion.WriteUnicodeString(System.Int32,System.String)">
            <summary>
            Writes a Unicode string (without a null terminator) to the allocated memory.
            </summary>
            <param name="offset">The offset to add.</param>
            <param name="s">The string to write.</param>
        </member>
        <member name="T:ProcessHacker.Native.Memory.PhysicalPages">
            <summary>
            Represents an allocation of physical pages.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Memory.PhysicalPages.#ctor(System.Int32)">
            <summary>
            Allocates physical pages.
            </summary>
            <param name="pageCount">The number of pages to allocate.</param>
        </member>
        <member name="M:ProcessHacker.Native.Memory.PhysicalPages.#ctor(System.Int32,System.Boolean)">
            <summary>
            Allocates physical pages.
            </summary>
            <param name="count">
            The number of bytes to allocate, or the number of pages to allocate 
            if <paramref name="pages" /> is true. If a number of bytes is used, 
            it will be rounded up to the system page size.</param>
            <param name="pages">
            Whether <paramref name="count" /> specifies bytes or pages.
            </param>
        </member>
        <member name="M:ProcessHacker.Native.Memory.PhysicalPages.#ctor(ProcessHacker.Native.Objects.ProcessHandle,System.Int32)">
            <summary>
            Allocates physical pages.
            </summary>
            <param name="processHandle">The process to allocate the pages in.</param>
            <param name="pageCount">The number of pages to allocate.</param>
        </member>
        <member name="M:ProcessHacker.Native.Memory.PhysicalPages.#ctor(ProcessHacker.Native.Objects.ProcessHandle,System.Int32,System.Boolean)">
            <summary>
            Allocates physical pages.
            </summary>
            <param name="processHandle">The process to allocate the pages in.</param>
            <param name="count">
            The number of bytes to allocate, or the number of pages to allocate 
            if <paramref name="pages" /> is true. If a number of bytes is used, 
            it will be rounded up to the system page size.</param>
            <param name="pages">
            Whether <paramref name="count" /> specifies bytes or pages.
            </param>
        </member>
        <member name="T:ProcessHacker.Native.Section">
            <summary>
            Represents a section, a memory mapping.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Section.#ctor(System.String,ProcessHacker.Native.Security.SectionAccess)">
            <summary>
            Opens an existing section.
            </summary>
            <param name="name">The name of an existing section.</param>
            <param name="access">The desired access to the section.</param>
        </member>
        <member name="M:ProcessHacker.Native.Section.#ctor(ProcessHacker.Native.Objects.FileHandle)">
            <summary>
            Creates a section backed by a file.
            </summary>
            <param name="fileHandle">A file handle.</param>
        </member>
        <member name="M:ProcessHacker.Native.Section.#ctor(ProcessHacker.Native.Objects.FileHandle,ProcessHacker.Native.Api.MemoryProtection)">
            <summary>
            Creates a section backed by a file.
            </summary>
            <param name="fileHandle">A file handle.</param>
            <param name="protection">The page protection to apply to mappings.</param>
        </member>
        <member name="M:ProcessHacker.Native.Section.#ctor(ProcessHacker.Native.Objects.FileHandle,System.Boolean,ProcessHacker.Native.Api.MemoryProtection)">
            <summary>
            Creates a section backed by a file.
            </summary>
            <param name="fileHandle">A file handle.</param>
            <param name="image">Whether to treat the file as an executable image.</param>
            <param name="protection">The page protection to apply to mappings.</param>
        </member>
        <member name="M:ProcessHacker.Native.Section.#ctor(System.String,ProcessHacker.Native.Objects.FileHandle,System.Boolean,ProcessHacker.Native.Api.MemoryProtection)">
            <summary>
            Creates a section backed by a file.
            </summary>
            <param name="name">The name of the section.</param>
            <param name="fileHandle">A file handle.</param>
            <param name="image">Whether to treat the file as an executable image.</param>
            <param name="protection">The page protection to apply to mappings.</param>
        </member>
        <member name="M:ProcessHacker.Native.Section.#ctor(System.Int64)">
            <summary>
            Creates a section backed by the page file (i.e. in memory).
            </summary>
            <param name="maximumSize">The maximum size of the section.</param>
        </member>
        <member name="M:ProcessHacker.Native.Section.#ctor(System.Int64,ProcessHacker.Native.Api.MemoryProtection)">
            <summary>
            Creates a section backed by the page file (i.e. in memory).
            </summary>
            <param name="maximumSize">The maximum size of the section.</param>
            <param name="protection">The page protection to apply to mappings.</param>
        </member>
        <member name="M:ProcessHacker.Native.Section.#ctor(System.String,System.Int64,ProcessHacker.Native.Api.MemoryProtection)">
            <summary>
            Creates a section backed by the page file (i.e. in memory).
            </summary>
            <param name="name">The name of the section.</param>
            <param name="maximumSize">The maximum size of the section.</param>
            <param name="protection">The page protection to apply to mappings.</param>
        </member>
        <member name="M:ProcessHacker.Native.Section.Extend(System.Int64)">
            <summary>
            Extends the size of the section.
            </summary>
            <param name="newSize">The new size of the section.</param>
        </member>
        <member name="M:ProcessHacker.Native.Section.MapView(System.Int32)">
            <summary>
            Creates a view of the section.
            </summary>
            <param name="size">
            The number of bytes to map. This value will be rounded up to the 
            page size.
            </param>
            <returns>A view of the section.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Section.MapView(System.Int32,ProcessHacker.Native.Api.MemoryProtection)">
            <summary>
            Creates a view of the section.
            </summary>
            <param name="size">
            The number of bytes to map. This value will be rounded up to the 
            page size.
            </param>
            <param name="protection">The page protection to apply to the mapping.</param>
            <returns>A view of the section.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Section.MapView(System.Int32,System.Int32,ProcessHacker.Native.Api.MemoryProtection)">
            <summary>
            Creates a view of the section.
            </summary>
            <param name="offset">
            The offset from the beginning of the section to map. This value 
            must be a multiple of 0x10000 (65536).
            </param>
            <param name="size">
            The number of bytes to map. This value will be rounded up to the 
            page size.
            </param>
            <param name="protection">The page protection to apply to the mapping.</param>
            <returns>A view of the section.</returns>
        </member>
        <member name="T:ProcessHacker.Native.NativeUtils">
            <summary>
            Provides various utility methods.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.NativeUtils.Call(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Calls a function.
            </summary>
            <param name="address">The address of the function.</param>
            <param name="param1">The first parameter to pass.</param>
            <param name="param2">The second parameter to pass.</param>
            <param name="param3">The third parameter to pass.</param>
        </member>
        <member name="T:ProcessHacker.Native.Objects.SamAliasHandle">
            <summary>
            Represents a handle to a SAM alias.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.SamAliasHandle.#ctor(ProcessHacker.Native.Objects.SamDomainHandle,System.Int32,ProcessHacker.Native.Security.SamAliasAccess)">
            <summary>
            Opens a SAM alias.
            </summary>
            <param name="domainHandle">A handle to a SAM domain.</param>
            <param name="aliasId">The relative ID of the alias to open.</param>
            <param name="access">The desired access to the alias.</param>
        </member>
        <member name="T:ProcessHacker.Native.Objects.SamUserHandle">
            <summary>
            Represents a handle to a SAM user.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.SamUserHandle.#ctor(ProcessHacker.Native.Objects.SamDomainHandle,System.Int32,ProcessHacker.Native.Security.SamUserAccess)">
            <summary>
            Opens a SAM user.
            </summary>
            <param name="domainHandle">A handle to a SAM domain.</param>
            <param name="userId">The relative ID of the user to open.</param>
            <param name="access">The desired access to the user.</param>
        </member>
        <member name="T:ProcessHacker.Native.Objects.SamGroupHandle">
            <summary>
            Represents a handle to a SAM group.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.SamGroupHandle.#ctor(ProcessHacker.Native.Objects.SamDomainHandle,System.Int32,ProcessHacker.Native.Security.SamGroupAccess)">
            <summary>
            Opens a SAM group.
            </summary>
            <param name="domainHandle">A handle to a SAM domain.</param>
            <param name="groupId">The relative ID of the group to open.</param>
            <param name="access">The desired access to the group.</param>
        </member>
        <member name="T:ProcessHacker.Native.Objects.SamDomainHandle">
            <summary>
            Represents a handle to a SAM domain.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.SamDomainHandle.#ctor(System.String,ProcessHacker.Native.Security.SamDomainAccess)">
            <summary>
            Opens a SAM account.
            </summary>
            <param name="name">The name of the domain to open.</param>
            <param name="access">The desired access to the domain.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.SamDomainHandle.#ctor(ProcessHacker.Native.Security.Sid,ProcessHacker.Native.Security.SamDomainAccess)">
            <summary>
            Opens a SAM account.
            </summary>
            <param name="domainId">The SID of the domain to open.</param>
            <param name="access">The desired access to the domain.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.SamDomainHandle.#ctor(ProcessHacker.Native.Objects.SamServerHandle,System.String,ProcessHacker.Native.Security.SamDomainAccess)">
            <summary>
            Opens a SAM account.
            </summary>
            <param name="serverHandle">A handle to a SAM server.</param>
            <param name="name">The name of the domain to open.</param>
            <param name="access">The desired access to the domain.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.SamDomainHandle.#ctor(ProcessHacker.Native.Objects.SamServerHandle,ProcessHacker.Native.Security.Sid,ProcessHacker.Native.Security.SamDomainAccess)">
            <summary>
            Opens a SAM account.
            </summary>
            <param name="serverHandle">A handle to a SAM server.</param>
            <param name="domainId">The SID of the domain to open.</param>
            <param name="access">The desired access to the domain.</param>
        </member>
        <member name="T:ProcessHacker.Native.Objects.SamServerHandle">
            <summary>
            Represents a handle to a SAM server.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.SamServerHandle.#ctor(ProcessHacker.Native.Security.SamServerAccess)">
            <summary>
            Opens the local SAM server.
            </summary>
            <param name="access">The desired access to the server.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.SamServerHandle.#ctor(System.String,ProcessHacker.Native.Security.SamServerAccess)">
            <summary>
            Opens a SAM server.
            </summary>
            <param name="serverName">The name of the server.</param>
            <param name="access">The desired access to the server.</param>
        </member>
        <member name="T:ProcessHacker.Native.Objects.LsaAccountHandle">
            <summary>
            Represents a handle to a LSA account.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.LsaAccountHandle.#ctor(ProcessHacker.Native.Objects.LsaPolicyHandle,ProcessHacker.Native.Security.Sid,ProcessHacker.Native.Security.LsaAccountAccess)">
            <summary>
            Opens a LSA account.
            </summary>
            <param name="policyHandle">A handle to a LSA policy.</param>
            <param name="sid">The SID of the account to open.</param>
            <param name="access">The desired access to the account.</param>
        </member>
        <member name="T:ProcessHacker.Native.Objects.LsaSecretHandle">
            <summary>
            Represents a handle to a LSA secret.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Objects.MailslotHandle">
            <summary>
            Represents a handle to a mailslot.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Objects.SamHandle`1">
            <summary>
            Represents a handle managed by the Security Accounts Manager.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Objects.PrivateNamespaceHandle">
            <summary>
            Represents a private namespace, a private directory object.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Objects.TerminalServerHandle.Current">
            <summary>
            Gets a handle to the local terminal server.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TerminalServerHandle.GetCurrent">
            <summary>
            Gets a handle to the local terminal server.
            </summary>
            <returns>A terminal server handle.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TerminalServerHandle.RegisterNotificationsCurrent(System.Windows.Forms.IWin32Window,System.Boolean)">
            <summary>
            Registers the specified window to receieve terminal server notifications.
            </summary>
            <param name="window">The window to receieve the notifications.</param>
            <param name="allSessions">Whether notifications should be created for all sessions.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TerminalServerHandle.UnregisterNotificationsCurrent(System.Windows.Forms.IWin32Window)">
            <summary>
            Unregisters terminal server notifications for the specified window.
            </summary>
            <param name="window">The window to stop receiving notifications.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TerminalServerHandle.#ctor(System.String)">
            <summary>
            Opens a terminal server.
            </summary>
            <param name="serverName">The NetBIOS name of the server.</param>
        </member>
        <member name="P:ProcessHacker.Native.Objects.TerminalServerHandle.SystemName">
            <summary>
            Gets the name of the terminal server.
            This value can be null when the server is local.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TerminalServerHandle.GetProcesses">
            <summary>
            Gets the processes running on the terminal server.
            </summary>
            <returns>An array of processes.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TerminalServerHandle.GetSession(System.Int32)">
            <summary>
            Gets information about a session on the terminal server.
            </summary>
            <param name="sessionId">The ID of the session.</param>
            <returns>Information about the session.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TerminalServerHandle.GetSessions">
            <summary>
            Gets the sessions on the terminal server.
            </summary>
            <returns>An array of sessions.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TerminalServerHandle.RegisterNotifications(System.Windows.Forms.IWin32Window,System.Boolean)">
            <summary>
            Registers the specified window to receieve terminal server notifications.
            </summary>
            <param name="window">The window to receieve the notifications.</param>
            <param name="allSessions">Whether notifications should be created for all sessions.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TerminalServerHandle.Shutdown(ProcessHacker.Native.Api.WtsShutdownFlags)">
            <summary>
            Causes the terminal server to shutdown.
            </summary>
            <param name="flag">The action to take.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TerminalServerHandle.TerminateProcess(System.Int32,System.Int32)">
            <summary>
            Terminates the specified process on the terminal server.
            </summary>
            <param name="pid">The ID of the process to terminate.</param>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TerminalServerHandle.UnregisterNotifications(System.Windows.Forms.IWin32Window)">
            <summary>
            Unregisters terminal server notifications for the specified window.
            </summary>
            <param name="window">The window to stop receiving notifications.</param>
        </member>
        <member name="T:ProcessHacker.Native.Objects.DirectoryHandle">
            <summary>
            Represents a directory object, which contains a collection of objects.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.DirectoryHandle.GetObjects">
            <summary>
            Gets the objects contained in the directory object.
            </summary>
            <returns>An array of object entries.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.EventHandle.SetBoostPriority">
            <summary>
            Sets the event and causes the waiting thread to be context switched 
            to regardless of its priority.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Objects.EventPairHandle">
            <summary>
            Represents an event pair, an object consisting of two events, high and low.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.EventPairHandle.Create(ProcessHacker.Native.Security.EventPairAccess)">
            <summary>
            Creates an unnamed event pair.
            </summary>
            <param name="access">The desired access to the event pair.</param>
            <returns>A handle to an event pair.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.EventPairHandle.Create(ProcessHacker.Native.Security.EventPairAccess,System.String,ProcessHacker.Native.Api.ObjectFlags,ProcessHacker.Native.Objects.DirectoryHandle)">
            <summary>
            Creates an event pair.
            </summary>
            <param name="access">The desired access to the event pair.</param>
            <param name="name">
            The name of the event pair. If rootDirectory is null, you must specify a fully 
            qualified name. Example: \BaseNamedObjects\MyEventPair.
            </param>     
            <param name="objectFlags">The flags to use when creating the object.</param>
            <param name="rootDirectory">
            The directory in which to place the event pair. This can be null.
            </param>
            <returns>A handle to an event pair.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.EventPairHandle.#ctor(System.String,ProcessHacker.Native.Api.ObjectFlags,ProcessHacker.Native.Objects.DirectoryHandle,ProcessHacker.Native.Security.EventPairAccess)">
            <summary>
            Opens a named event pair.
            </summary>
            <param name="name">
            The name of the event pair. If rootDirectory is null, 
            you must specify a fully qualified name.</param>
            <param name="objectFlags">The flags to use when opening the object.</param>
            <param name="rootDirectory">The directory object in which the event pair can be found.</param>
            <param name="access">The desired access to the event pair.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.EventPairHandle.SetHigh">
            <summary>
            Sets the high event.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.EventPairHandle.SetHighWaitLow">
            <summary>
            Sets the high event and waits for the low event.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.EventPairHandle.SetLow">
            <summary>
            Sets the low event.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.EventPairHandle.SetLowWaitHigh">
            <summary>
            Sets the low event and waits for the high event.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.EventPairHandle.WaitHigh">
            <summary>
            Waits for the high event.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.EventPairHandle.WaitLow">
            <summary>
            Waits for the low event.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TimerHandle.Create(ProcessHacker.Native.Security.TimerAccess,ProcessHacker.Native.Api.TimerType)">
            <summary>
            Creates a timer.
            </summary>
            <param name="access">The desired access to the timer.</param>
            <param name="type">
            The type of timer; synchronization timers will be reset once waiting threads are released.
            </param>
            <returns>A handle to the timer.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TimerHandle.Create(ProcessHacker.Native.Security.TimerAccess,System.String,ProcessHacker.Native.Api.TimerType)">
            <summary>
            Creates a timer.
            </summary>
            <param name="access">The desired access to the timer.</param>
            <param name="name">A name for the timer in the object manager namespace.</param>
            <param name="type">
            The type of timer; synchronization timers will be reset once waiting threads are released.
            </param>
            <returns>A handle to the timer.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TimerHandle.Create(ProcessHacker.Native.Security.TimerAccess,System.String,ProcessHacker.Native.Api.ObjectFlags,ProcessHacker.Native.Objects.DirectoryHandle,ProcessHacker.Native.Api.TimerType)">
            <summary>
            Creates a timer.
            </summary>
            <param name="access">The desired access to the timer.</param>
            <param name="name">A name for the timer in the object manager namespace.</param>
            <param name="objectFlags">The flags to use when creating the object.</param>
            <param name="rootDirectory">The directory in which to place the timer. This can be null.</param>
            <param name="type">
            The type of timer; synchronization timers will be reset once waiting threads are released.
            </param>
            <returns>A handle to the timer.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TimerHandle.Cancel">
            <summary>
            Cancels the timer, preventing it from being signaled.
            </summary>
            <returns>The state of the timer (whether it is signaled).</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TimerHandle.GetBasicInformation">
            <summary>
            Gets information about the timer.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TimerHandle.Set(System.DateTime,System.Int32)">
            <summary>
            Sets the timer.
            </summary>
            <param name="dueTime">The time at which the timer is to be signaled.</param>
            <param name="period">
            The time interval for periodic signaling of the timer, in milliseconds. 
            Specify 0 for no periodic signaling.
            </param>
            <returns>The state of the timer (whether it is signaled).</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TimerHandle.Set(System.Int64,System.Int32)">
            <summary>
            Sets the timer.
            </summary>
            <param name="dueTime">A relative due time, in 100ns units.</param>
            <param name="period">
            The time interval for periodic signaling of the timer, in milliseconds. 
            Specify 0 for no periodic signaling.
            </param>
            <returns>The state of the timer (whether it is signaled).</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TimerHandle.Set(System.Int64,ProcessHacker.Native.Api.TimerApcRoutine,System.Int32)">
            <summary>
            Sets the timer.
            </summary>
            <param name="dueTime">A relative due time, in 100ns units.</param>
            <param name="routine">A routine to call when the timer is signaled.</param>
            <param name="period">
            The time interval for periodic signaling of the timer, in milliseconds. 
            Specify 0 for no periodic signaling.
            </param>
            <returns>The state of the timer (whether it is signaled).</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TimerHandle.Set(System.Int64,System.Boolean,ProcessHacker.Native.Api.TimerApcRoutine,System.IntPtr,System.Int32)">
            <summary>
            Sets the timer.
            </summary>
            <param name="dueTime">A due time, in 100ns units.</param>
            <param name="relative">Whether the due time is relative.</param>
            <param name="routine">A routine to call when the timer is signaled.</param>
            <param name="context">A value to pass to the timer callback routine.</param>
            <param name="period">
            The time interval for periodic signaling of the timer, in milliseconds. 
            Specify 0 for no periodic signaling.
            </param>
            <returns>The state of the timer (whether it is signaled).</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TimerHandle.Set(System.Int64,System.Boolean,ProcessHacker.Native.Api.TimerApcRoutine,System.IntPtr,System.Boolean,System.Int32)">
            <summary>
            Sets the timer.
            </summary>
            <param name="dueTime">A due time, in 100ns units.</param>
            <param name="relative">Whether the due time is relative.</param>
            <param name="routine">A routine to call when the timer is signaled.</param>
            <param name="context">A value to pass to the timer callback routine.</param>
            <param name="resume">
            Whether the power manager should restore the system when the timer is signaled.
            </param>
            <param name="period">
            The time interval for periodic signaling of the timer, in milliseconds. 
            Specify 0 for no periodic signaling.
            </param>
            <returns>The state of the timer (whether it is signaled).</returns>
        </member>
        <member name="T:ProcessHacker.Native.Objects.FileHandle">
            <summary>
            Represents a handle to a file.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Create(ProcessHacker.Native.Security.FileAccess,System.String,ProcessHacker.Native.Api.FileCreateOptions)">
            <summary>
            Creates or opens a file.
            </summary>
            <param name="access">The desired access to the file.</param>
            <param name="fileName">
            An object name identifying the file to open. To use a DOS format 
            file name, prepend "\??\" to the file name.
            </param>
            <param name="createOptions">Options to use when creating the file.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Create(ProcessHacker.Native.Security.FileAccess,System.String,ProcessHacker.Native.Api.FileShareMode,ProcessHacker.Native.Api.FileCreateOptions)">
            <summary>
            Creates or opens a file.
            </summary>
            <param name="access">The desired access to the file.</param>
            <param name="fileName">
            An object name identifying the file to open. To use a DOS format 
            file name, prepend "\??\" to the file name.
            </param>
            <param name="shareMode">The types of access to the file to grant to other threads.</param>
            <param name="createOptions">Options to use when creating the file.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.#ctor(System.String,ProcessHacker.Native.Security.FileAccess)">
            <summary>
            Opens an existing file for synchronous access.
            </summary>
            <param name="fileName">
            An object name identifying the file to open. To use a DOS format 
            file name, prepend "\??\" to the file name.
            </param>
            <param name="access">The desired access to the file.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.#ctor(System.String,ProcessHacker.Native.Api.FileShareMode,ProcessHacker.Native.Security.FileAccess)">
            <summary>
            Opens an existing file for synchronous access.
            </summary>
            <param name="fileName">
            An object name identifying the file to open. To use a DOS format 
            file name, prepend "\??\" to the file name.
            </param>
            <param name="shareMode">The share mode to use.</param>
            <param name="access">The desired access to the file.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.#ctor(System.String,ProcessHacker.Native.Api.FileShareMode,ProcessHacker.Native.Api.FileCreateOptions,ProcessHacker.Native.Security.FileAccess)">
            <summary>
            Opens an existing file.
            </summary>
            <param name="fileName">
            An object name identifying the file to open. To use a DOS format 
            file name, prepend "\??\" to the file name.
            </param>
            <param name="shareMode">The share mode to use.</param>
            <param name="openOptions">Open options to use.</param>
            <param name="access">The desired access to the file.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.#ctor(System.String,ProcessHacker.Native.Api.ObjectFlags,ProcessHacker.Native.Objects.NativeHandle,ProcessHacker.Native.Api.FileShareMode,ProcessHacker.Native.Api.FileCreateOptions,ProcessHacker.Native.Security.FileAccess)">
            <summary>
            Opens an existing file.
            </summary>
            <param name="fileName">
            An object name identifying the file to open. To use a DOS format 
            file name, prepend "\??\" to the file name.
            </param>
            <param name="objectFlags">Flags to use when opening the object.</param>
            <param name="rootDirectory">The directory to open the file relative to.</param>
            <param name="shareMode">The share mode to use.</param>
            <param name="openOptions">Open options to use.</param>
            <param name="access">The desired access to the file.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.CancelIo">
            <summary>
            Cancels all asynchronous file operations initiated on the file object by the current thread.
            </summary>
            <returns>An I/O status block.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Delete">
            <summary>
            Deletes the file when the handle is closed.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.EndCommonIo(ProcessHacker.Native.Objects.AsyncIoContext)">
            <summary>
            Waits for an asynchronous file operation to complete.
            </summary>
            <param name="asyncContext">An asynchronous I/O context object representing the operation.</param>
            <returns>The operation-specific result.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.EndFsControl(ProcessHacker.Native.Objects.AsyncIoContext)">
            <summary>
            Waits for an asynchronous file system control operation to complete.
            </summary>
            <param name="asyncContext">An asynchronous I/O context object representing the operation.</param>
            <returns>The bytes returned in the output buffer.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.EndIoControl(ProcessHacker.Native.Objects.AsyncIoContext)">
            <summary>
            Waits for an asynchronous I/O control operation to complete.
            </summary>
            <param name="asyncContext">An asynchronous I/O context object representing the operation.</param>
            <returns>The bytes returned in the output buffer.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.EndLock(ProcessHacker.Native.Objects.AsyncIoContext)">
            <summary>
            Waits for an asynchronous lock operation to complete.
            </summary>
            <param name="asyncContext">An asynchronous I/O context object representing the operation.</param>
            <returns>True if the lock was acquired, otherwise false.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.EndRead(ProcessHacker.Native.Objects.AsyncIoContext)">
            <summary>
            Waits for an asynchronous read operation to complete.
            </summary>
            <param name="asyncContext">An asynchronous I/O context object representing the operation.</param>
            <returns>The number of bytes read as a result of the operation.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.EndWrite(ProcessHacker.Native.Objects.AsyncIoContext)">
            <summary>
            Waits for an asynchronous write operation to complete.
            </summary>
            <param name="asyncContext">An asynchronous I/O context object representing the operation.</param>
            <returns>The number of bytes written as a result of the operation.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.EnumFiles(ProcessHacker.Native.Objects.FileHandle.EnumFilesDelegate)">
            <summary>
            Enumerates the files contained in the directory.
            </summary>
            <param name="callback">The callback function to use.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.EnumFiles(ProcessHacker.Native.Objects.FileHandle.EnumFilesDelegate,System.String)">
            <summary>
            Enumerates the files contained in the directory.
            </summary>
            <param name="callback">The callback function to use.</param>
            <param name="searchPattern">A search pattern to use. For example, "*.txt".</param>
            <remarks>
            If a search pattern is specified, it will be used for all future 
            enumerations performed on this file handle. Any search patterns 
            specified in future enumerations will be ignored.
            </remarks>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.EnumStreams(ProcessHacker.Native.Objects.FileHandle.EnumStreamsDelegate)">
            <summary>
            Enumerates the streams contained in the file.
            </summary>
            <param name="callback">The callback function to use.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Flush">
            <summary>
            Flushes the buffers for the file.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.FsControl(System.Int32,System.Byte[],System.Byte[])">
            <summary>
            Sends a file system control message to the device's associated driver.
            </summary>
            <param name="controlCode">The device-specific control code.</param>
            <param name="inBuffer">The input buffer.</param>
            <param name="outBuffer">The output buffer.</param>
            <returns>The bytes returned in the output buffer.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.GetAttributes">
            <summary>
            Gets the attributes of the file.
            </summary>
            <returns>The attributes of the file.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.GetBasicInformation">
            <summary>
            Gets basic information about the file.
            </summary>
            <returns>Basic information about the file.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.GetFileName">
            <summary>
            Gets the partial name of the file.
            </summary>
            <returns>The name of the file, relative to its volume.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.GetFiles">
            <summary>
            Gets a list of the files contained in the directory.
            </summary>
            <returns>An array of file information structures.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.GetFiles(System.String)">
            <summary>
            Gets a list of the files contained in the directory.
            </summary>
            <param name="searchPattern">A search pattern to use. For example, "*.txt".</param>
            <returns>An array of file information structures.</returns>
            <remarks>
            If a search pattern is specified, it will be used for all future 
            enumerations performed on this file handle. Any search patterns 
            specified in future enumerations will be ignored.
            </remarks>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.GetPosition">
            <summary>
            Gets the current position.
            </summary>
            <returns>A byte offset from the beginning of the file.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.GetStreams">
            <summary>
            Gets a list of the streams contained in the file.
            </summary>
            <returns>An array of stream information structures.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.GetSize">
            <summary>
            Gets the size of the file.
            </summary>
            <returns>The size of the file.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.GetStandardInformation">
            <summary>
            Gets standard information about the file.
            </summary>
            <returns>Standard information about the file.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.GetVolumeFsName">
            <summary>
            Gets the file system name of the file's associated volume.
            </summary>
            <returns>The volume's file system name.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.GetVolumeLabel">
            <summary>
            Gets the label of the file's associated volume.
            </summary>
            <returns>The volume label.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.IoControl(System.Int32,System.Byte[],System.Byte[])">
            <summary>
            Sends an I/O control message to the device's associated driver.
            </summary>
            <param name="controlCode">The device-specific control code.</param>
            <param name="inBuffer">The input buffer.</param>
            <param name="outBuffer">The output buffer.</param>
            <returns>The bytes returned in the output buffer.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Lock(System.Int64,System.Int64)">
            <summary>
            Locks a byte range in the file.
            </summary>
            <param name="offset">The starting offset of the byte range.</param>
            <param name="length">The length of the byte range.</param>
            <returns>True if the lock was acquired, otherwise false.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Lock(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Locks a byte range in the file.
            </summary>
            <param name="offset">The starting offset of the byte range.</param>
            <param name="length">The length of the byte range.</param>
            <param name="wait">
            True to wait for the lock to be acquired, false to return if the 
            lock cannot be acquired immediately.
            </param>
            <returns>True if the lock was acquired, otherwise false.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Lock(System.Int64,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Locks a byte range in the file.
            </summary>
            <param name="offset">The starting offset of the byte range.</param>
            <param name="length">The length of the byte range.</param>
            <param name="wait">
            True to wait for the lock to be acquired, false to return if the 
            lock cannot be acquired immediately.
            </param>
            <param name="exclusive">
            True to acquire an exclusive lock, false to acquire a shared lock.
            </param>
            <returns>True if the lock was acquired, otherwise false.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Read(System.Int32)">
            <summary>
            Reads data from the file.
            </summary>
            <param name="length">The length to read.</param>
            <returns>The read data.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Read(System.Byte[])">
            <summary>
            Reads data from the file.
            </summary>
            <param name="buffer">The buffer to store the data in.</param>
            <returns>The number of bytes read from the file.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the file.
            </summary>
            <param name="buffer">The data.</param>
            <param name="offset">The offset into the buffer to use.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The number of bytes read from the file.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Read(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the file.
            </summary>
            <param name="fileOffset">
            The offset into the file to start reading from. Specify -1 to 
            use the file object's current position.
            </param>
            <param name="buffer">The data.</param>
            <param name="offset">The offset into the buffer to use.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The number of bytes read from the file.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Read(System.Void*,System.Int32)">
            <summary>
            Reads data from the file.
            </summary>
            <param name="buffer">The data.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The number of bytes read from the file.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Read(System.Int64,System.Void*,System.Int32)">
            <summary>
            Reads data from the file.
            </summary>
            <param name="fileOffset">
            The offset into the file to start reading from. Specify -1 to 
            use the file object's current position.
            </param>
            <param name="buffer">The data.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The number of bytes read from the file.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Read(System.IntPtr,System.Int32)">
            <summary>
            Reads data from the file.
            </summary>
            <param name="buffer">The data.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The number of bytes read from the file.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Read(System.Int64,System.IntPtr,System.Int32)">
            <summary>
            Reads data from the file.
            </summary>
            <param name="fileOffset">
            The offset into the file to start reading from. Specify -1 to 
            use the file object's current position.
            </param>
            <param name="buffer">The data.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The number of bytes read from the file.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.SetEnd(System.Int64)">
            <summary>
            Truncates or extends the file.
            </summary>
            <param name="offset">A byte offset from the beginning of the file.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.SetIoCompletion(ProcessHacker.Native.Objects.AsyncIoCompletionPort)">
            <summary>
            Associates an I/O completion port with the file object.
            </summary>
            <param name="asyncCompletionPort">An asynchronous I/O completion port.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.SetIoCompletion(ProcessHacker.Native.Objects.IoCompletionHandle)">
            <summary>
            Associates an I/O completion port with the file object.
            </summary>
            <param name="ioCompletionHandle">A handle to an I/O completion port.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.SetIoCompletion(ProcessHacker.Native.Objects.IoCompletionHandle,System.IntPtr)">
            <summary>
            Associates an I/O completion port with the file object.
            </summary>
            <param name="ioCompletionHandle">A handle to an I/O completion port.</param>
            <param name="keyContext">A key to associate with the file object.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.SetPosition(System.Int64)">
            <summary>
            Sets the current file position.
            </summary>
            <param name="offset">A byte offset from the beginning of the file.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.SetPosition(System.Int64,ProcessHacker.Native.Objects.PositionOrigin)">
            <summary>
            Sets the current file position.
            </summary>
            <param name="offset">A byte offset.</param>
            <param name="origin">The origin from which the offset is calculated.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Unlock(System.Int64,System.Int64)">
            <summary>
            Unlocks a byte range in the file.
            </summary>
            <param name="offset">The starting offset of the byte range.</param>
            <param name="length">The length of the byte range.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Write(System.Byte[])">
            <summary>
            Writes data to the file.
            </summary>
            <param name="buffer">The data.</param>
            <returns>The number of bytes written to the file.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the file.
            </summary>
            <param name="buffer">The data.</param>
            <param name="offset">The offset into the buffer to use.</param>
            <param name="length">The number of bytes to write.</param>
            <returns>The number of bytes written to the file.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Write(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the file.
            </summary>
            <param name="fileOffset">
            The offset into the file to start writing at. Specify -1 to 
            use the file object's current position.
            </param>
            <param name="buffer">The data.</param>
            <param name="offset">The offset into the buffer to use.</param>
            <param name="length">The number of bytes to write.</param>
            <returns>The number of bytes written to the file.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Write(System.Void*,System.Int32)">
            <summary>
            Writes data to the file.
            </summary>
            <param name="buffer">The data.</param>
            <param name="length">The number of bytes to write.</param>
            <returns>The number of bytes written to the file.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Write(System.Int64,System.Void*,System.Int32)">
            <summary>
            Writes data to the file.
            </summary>
            <param name="fileOffset">
            The offset into the file to start writing at. Specify -1 to 
            use the file object's current position.
            </param>
            <param name="buffer">The data.</param>
            <param name="length">The number of bytes to write.</param>
            <returns>The number of bytes written to the file.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Write(System.IntPtr,System.Int32)">
            <summary>
            Writes data to the file.
            </summary>
            <param name="buffer">The data.</param>
            <param name="length">The number of bytes to write.</param>
            <returns>The number of bytes written to the file.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.FileHandle.Write(System.Int64,System.IntPtr,System.Int32)">
            <summary>
            Writes data to the file.
            </summary>
            <param name="fileOffset">
            The offset into the file to start writing at. Specify -1 to 
            use the file object's current position.
            </param>
            <param name="buffer">The data.</param>
            <param name="length">The number of bytes to write.</param>
            <returns>The number of bytes written to the file.</returns>
        </member>
        <member name="T:ProcessHacker.Native.Objects.ISynchronizable">
            <summary>
            Represents a Windows object that can be synchronized with.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Objects.IWithToken">
            <summary>
            Represents a Windows object that contains a token.
            </summary>
            <remarks>
            This interface is useful because both processes and threads have 
            tokens, but the method used to open their tokens are different.
            </remarks>
        </member>
        <member name="M:ProcessHacker.Native.Objects.IWithToken.GetToken">
            <summary>
            Opens and returns the object's token.
            </summary>
            <returns>A handle to the token.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.IWithToken.GetToken(ProcessHacker.Native.Security.TokenAccess)">
            <summary>
            Opens and returns the object's token.
            </summary>
            <param name="access">Specifies the desired access to the token.</param>
            <returns>A handle to the token.</returns>
        </member>
        <member name="T:ProcessHacker.Native.Objects.JobObjectHandle">
            <summary>
            Represents a handle to a Windows job object.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.JobObjectHandle.FromHandle(System.IntPtr)">
            <summary>
            Creates a service handle using an existing handle. 
            The handle will not be closed automatically.
            </summary>
            <param name="handle">The handle value.</param>
            <returns>The job handle.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.JobObjectHandle.#ctor(ProcessHacker.Native.Objects.ProcessHandle,ProcessHacker.Native.Security.JobObjectAccess)">
            <summary>
            Opens the job object associated with the specified process.
            </summary>
            <param name="processHandle">The process.</param>
            <param name="access">The desired access to the job object.</param>
        </member>
        <member name="T:ProcessHacker.Native.Objects.LsaHandle`1">
            <summary>
            Represents a handle managed by the Local Security Authority.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Objects.LsaPolicyHandle">
            <summary>
            Represents a handle to a LSA policy.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.LsaPolicyHandle.#ctor(ProcessHacker.Native.Security.LsaPolicyAccess)">
            <summary>
            Opens the local LSA policy object.
            </summary>
            <param name="access">The desired access to the policy.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.LsaPolicyHandle.#ctor(System.String,ProcessHacker.Native.Security.LsaPolicyAccess)">
            <summary>
            Opens a LSA policy object.
            </summary>
            <param name="systemName">The name of the system on which the policy resides.</param>
            <param name="access">The desired access to the policy.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.LsaPolicyHandle.EnumAccounts(ProcessHacker.Native.Objects.LsaPolicyHandle.EnumAccountsDelegate)">
            <summary>
            Enumerates the accounts in the policy. This requires 
            ViewLocalInformation access.
            </summary>
            <param name="callback">The callback for the enumeration.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.LsaPolicyHandle.EnumAccountsWithPrivilege(System.String,ProcessHacker.Native.Objects.LsaPolicyHandle.EnumAccountsDelegate)">
            <summary>
            Enumerates the accounts in the policy with the specified privilege. 
            This requires LookupNames, ViewLocalInformation and usually 
            administrator access.
            </summary>
            <param name="privilegeName">The name of the required privilege.</param>
            <param name="callback">The callback for the enumeration.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.LsaPolicyHandle.EnumPrivileges(ProcessHacker.Native.Objects.LsaPolicyHandle.EnumPrivilegesDelegate)">
            <summary>
            Enumerates the privileges in the policy. This requires 
            ViewLocalInformation access.
            </summary>
            <param name="callback">The callback for the enumeration.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.LsaPolicyHandle.GetAccounts">
            <summary>
            Gets the accounts in the policy. This requires 
            ViewLocalInformation access.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.LsaPolicyHandle.GetAccountsWithPrivilege(System.String)">
            <summary>
            Gets the accounts in the policy with the specified privilege. 
            This requires LookupNames, ViewLocalInformation and usually 
            administrator access.
            </summary>
            <param name="privilegeName">The name of the required privilege.</param>
        </member>
        <member name="T:ProcessHacker.Native.Objects.NamedPipeHandle">
            <summary>
            Represents a handle to a named pipe.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NamedPipeHandle.Wait(System.String,System.Int64)">
            <summary>
            Waits for an instance of the specified named pipe to 
            become available for connection.
            </summary>
            <param name="name">The short name of the named pipe.</param>
            <param name="timeout">
            The timeout, in 100ns units.
            </param>
            <returns>
            True if an instance of the pipe was available before the timeout 
            interval elapsed, otherwise false.
            </returns>
        </member>
        <member name="T:ProcessHacker.Native.Objects.ProcessHandle">
            <summary>
            Represents a handle to a Windows process.
            </summary>
            <remarks>
            The idea of a ProcessHandle class is 
            different to the <see cref="T:System.Diagnostics.Process"/> class; 
            instead of opening the process with the right permissions every 
            time a query or set function is called, this lets the users control 
            when they want to open handles with certain permissions. This 
            means that handles can be cached (by the users).
            </remarks>
        </member>
        <member name="T:ProcessHacker.Native.Objects.ProcessHandle.EnumMemoryDelegate">
            <summary>
            The callback for enumerating process memory regions.
            </summary>
            <param name="info">The basic information for the memory region.</param>
            <returns>Return true to continue enumerating; return false to stop.</returns>
        </member>
        <member name="T:ProcessHacker.Native.Objects.ProcessHandle.EnumModulesDelegate">
            <summary>
            The callback for enumerating process modules.
            </summary>
            <param name="module">The module information.</param>
            <returns>Return true to continue enumerating; return false to stop.</returns>
        </member>
        <member name="P:ProcessHacker.Native.Objects.ProcessHandle.Current">
            <summary>
            Gets a handle to the current process.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.Create(ProcessHacker.Native.Security.ProcessAccess,ProcessHacker.Native.Objects.ProcessHandle,System.Boolean,ProcessHacker.Native.Objects.SectionHandle)">
            <summary>
            Creates a process.
            </summary>
            <param name="access">The desired access to the new process.</param>
            <param name="parentProcess">The process to inherit the address space and handles from.</param>
            <param name="inheritHandles">Specify true to inherit handles, otherwise false.</param>
            <param name="sectionHandle">A section of an executable image.</param>
            <returns>A handle to the new process.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.Create(ProcessHacker.Native.Security.ProcessAccess,System.String,ProcessHacker.Native.Api.ObjectFlags,ProcessHacker.Native.Objects.DirectoryHandle,ProcessHacker.Native.Objects.ProcessHandle,System.Boolean,ProcessHacker.Native.Objects.SectionHandle,ProcessHacker.Native.Objects.DebugObjectHandle)">
            <summary>
            Creates a process.
            </summary>
            <param name="access">The desired access to the new process.</param>
            <param name="name">The name of the process.</param>
            <param name="objectFlags">The flags to use when creating the object.</param>
            <param name="rootDirectory">A handle to the directory in which to place the object.</param>
            <param name="parentProcess">The process to inherit the address space and handles from.</param>
            <param name="inheritHandles">Specify true to inherit handles, otherwise false.</param>
            <param name="sectionHandle">A section of an executable image.</param>
            <param name="debugPort">A debug object to attach the process to.</param>
            <returns>A handle to the new process.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.FromHandle(System.IntPtr)">
            <summary>
            Creates a process handle using an existing handle. 
            The handle will not be closed automatically.
            </summary>
            <param name="handle">The handle value.</param>
            <returns>The process handle.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetCurrent">
            <summary>
            Gets a handle to the current process.
            </summary>
            <returns>A process handle.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetCurrentId">
            <summary>
            Gets the ID of the current process.
            </summary>
            <returns>The ID of the current process.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetCurrentPeb">
            <summary>
            Gets a pointer to the current process' environment block.
            </summary>
            <returns>A pointer to the current PEB.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.OpenByName(System.String,ProcessHacker.Native.Security.ProcessAccess)">
            <summary>
            Opens processes with the specified name.
            </summary>
            <param name="processName">The names of the processes to open.</param>
            <param name="access">The desired access to the processes.</param>
            <returns>An array of process handles.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.OpenCurrent(ProcessHacker.Native.Security.ProcessAccess)">
            <summary>
            Opens a handle to the current process.
            </summary>
            <param name="access">The desired access to the current process.</param>
            <returns>A handle.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.#ctor(System.Int32)">
            <summary>
            Opens a process.
            </summary>
            <param name="pid">The ID of the process to open.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.#ctor(System.Int32,ProcessHacker.Native.Security.ProcessAccess)">
            <summary>
            Opens a process.
            </summary>
            <param name="pid">The ID of the process to open.</param>
            <param name="access">The desired access to the process.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.#ctor(ProcessHacker.Native.Objects.ThreadHandle,ProcessHacker.Native.Security.ProcessAccess)">
            <summary>
            Opens a thread's process.
            </summary>
            <param name="threadHandle">A handle to a thread.</param>
            <param name="access">The desired access to the process.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.#ctor(System.String,ProcessHacker.Native.Api.ObjectFlags,ProcessHacker.Native.Objects.DirectoryHandle,ProcessHacker.Native.Api.ClientId,ProcessHacker.Native.Security.ProcessAccess)">
            <summary>
            Opens a process.
            </summary>
            <param name="name">The name of the process.</param>
            <param name="objectFlags">The flags to use when opening the object.</param>
            <param name="rootDirectory">
            A handle to the directory in which the object is located.
            </param>
            <param name="clientId">A Client ID structure describing the process.</param>
            <param name="access">The desired access to the process.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.#ctor(System.String,ProcessHacker.Native.Security.ProcessAccess)">
            <summary>
            Opens a process.
            </summary>
            <param name="name">The name of the process.</param>
            <param name="access">The desired access to the process.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.#ctor(ProcessHacker.Native.Api.ClientId,ProcessHacker.Native.Security.ProcessAccess)">
            <summary>
            Opens a process.
            </summary>
            <param name="clientId">A Client ID structure describing the process.</param>
            <param name="access">The desired access to the process.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.AllocateMemory(System.Int32,ProcessHacker.Native.Api.MemoryProtection)">
            <summary>
            Allocates a memory region in the process' virtual memory. The function decides where 
            to allocate the memory.
            </summary>
            <param name="size">The size of the region.</param>
            <param name="protection">The protection of the region.</param>
            <returns>The base address of the allocated pages.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.AllocateMemory(System.Int32,ProcessHacker.Native.Api.MemoryFlags,ProcessHacker.Native.Api.MemoryProtection)">
            <summary>
            Allocates a memory region in the process' virtual memory. The function decides where 
            to allocate the memory.
            </summary>
            <param name="size">The size of the region.</param>
            <param name="type">The type of allocation.</param>
            <param name="protection">The protection of the region.</param>
            <returns>The base address of the allocated pages.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.AllocateMemory(System.IntPtr,System.Int32,ProcessHacker.Native.Api.MemoryFlags,ProcessHacker.Native.Api.MemoryProtection)">
            <summary>
            Allocates a memory region in the process' virtual memory.
            </summary>      
            <param name="baseAddress">The base address of the region.</param>
            <param name="size">The size of the region.</param>
            <param name="type">The type of allocation.</param>
            <param name="protection">The protection of the region.</param>
            <returns>The base address of the allocated pages.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.AllocateMemory(System.IntPtr,System.IntPtr@,ProcessHacker.Native.Api.MemoryFlags,ProcessHacker.Native.Api.MemoryProtection)">
            <summary>
            Allocates a memory region in the process' virtual memory.
            </summary>      
            <param name="baseAddress">The base address of the region.</param>
            <param name="size">
            The size of the region. This variable will be modified to contain 
            the actual allocated size.
            </param>
            <param name="type">The type of allocation.</param>
            <param name="protection">The protection of the region.</param>
            <returns>The base address of the allocated pages.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.AssignToJobObject(ProcessHacker.Native.Objects.JobObjectHandle)">
            <summary>
            Assigns the process to a job object. The job handle must have the 
            JOB_OBJECT_ASSIGN_PROCESS permission and the process handle must have 
            the PROCESS_SET_QUOTA and PROCESS_TERMINATE permissions.
            </summary>
            <param name="job">The job object to assign the process to.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.CreateThread(System.IntPtr,System.IntPtr)">
            <summary>
            Creates a thread in the process.
            </summary>
            <param name="startAddress">The address at which to begin execution.</param>
            <param name="parameter">The parameter to pass to the function.</param>
            <returns>A handle to the new thread.</returns>
            <remarks>This function will work across sessions, unlike CreateThreadWin32.</remarks>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.CreateThread(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            Creates a thread in the process.
            </summary>
            <param name="startAddress">The address at which to begin execution.</param>
            <param name="parameter">The parameter to pass to the function.</param>
            <param name="createSuspended">Whether to create the thread suspended.</param>
            <returns>A handle to the new thread.</returns>
            <remarks>This function will work across sessions, unlike CreateThreadWin32.</remarks>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.CreateThread(System.IntPtr,System.IntPtr,System.Boolean,System.Int32@)">
            <summary>
            Creates a thread in the process.
            </summary>
            <param name="startAddress">The address at which to begin execution.</param>
            <param name="parameter">The parameter to pass to the function.</param>
            <param name="createSuspended">Whether to create the thread suspended.</param>
            <param name="threadId">The ID of the new thread.</param>
            <returns>A handle to the new thread.</returns>
            <remarks>This function will work across sessions, unlike CreateThreadWin32.</remarks>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.CreateThreadWin32(System.IntPtr,System.IntPtr)">
            <summary>
            Creates a thread in the process and notifies the Win32 subsystem.
            </summary>
            <param name="startAddress">The address at which to begin execution.</param>
            <param name="parameter">The parameter to pass to the function.</param>
            <returns>A handle to the new thread.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.CreateThreadWin32(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            Creates a thread in the process and notifies the Win32 subsystem.
            </summary>
            <param name="startAddress">The address at which to begin execution.</param>
            <param name="parameter">The parameter to pass to the function.</param>
            <param name="createSuspended">Whether to create the thread suspended.</param>
            <returns>A handle to the new thread.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.CreateThreadWin32(System.IntPtr,System.IntPtr,System.Boolean,System.Int32@)">
            <summary>
            Creates a thread in the process and notifies the Win32 subsystem.
            </summary>
            <param name="startAddress">The address at which to begin execution.</param>
            <param name="parameter">The parameter to pass to the function.</param>
            <param name="createSuspended">Whether to create the thread suspended.</param>
            <param name="threadId">The ID of the new thread.</param>
            <returns>A handle to the new thread.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.Debug(ProcessHacker.Native.Objects.DebugObjectHandle)">
            <summary>
            Debugs the process with the specified debug object. This requires 
            PROCESS_SUSPEND_RESUME access.
            </summary>
            <param name="debugObjectHandle">A handle to a debug object.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.DisableHandleTracing">
            <summary>
            Disables the collection of handle stack traces. This requires 
            PROCESS_SET_INFORMATION access. Note that this function is only 
            available on Windows Vista and above.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.EmptyWorkingSet">
            <summary>
            Removes as many pages as possible from the process' working set. This requires the 
            PROCESS_QUERY_INFORMATION and PROCESS_SET_INFORMATION permissions.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.EnableHandleTracing">
            <summary>
            Enables the collection of handle stack traces. This requires 
            PROCESS_SET_INFORMATION access.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.EnumMemory(ProcessHacker.Native.Objects.ProcessHandle.EnumMemoryDelegate)">
            <summary>
            Enumerates the memory regions of the process.
            </summary>
            <param name="enumMemoryCallback">The callback for the enumeration.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.EnumModules(ProcessHacker.Native.Objects.ProcessHandle.EnumModulesDelegate)">
            <summary>
            Enumerates the modules loaded by the process.
            </summary>
            <param name="enumModulesCallback">The callback for the enumeration.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.EnumModulesApi(ProcessHacker.Native.Objects.ProcessHandle.EnumModulesDelegate)">
            <summary>
            Enumerates the modules loaded by the process using PSAPI.
            </summary>
            <param name="enumModulesCallback">The callback for the enumeration.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.EnumModulesNative(ProcessHacker.Native.Objects.ProcessHandle.EnumModulesDelegate)">
            <summary>
            Enumerates the modules loaded by the process by reading the NT loader data.
            </summary>
            <param name="enumModulesCallback">The callback for the enumeration.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.FlushMemory(System.IntPtr,System.Int32)">
            <summary>
            Flushes the process' virtual memory.
            </summary>
            <param name="baseAddress">The base address of the region to flush.</param>
            <param name="size">The size of the region to flush.</param>
            <returns>A NT status value.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.FreeMemory(System.IntPtr,System.Int32)">
            <summary>
            Frees a memory region in the process' virtual memory.
            </summary>
            <param name="baseAddress">The address of the region to free.</param>
            <param name="size">The size to free.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.FreeMemory(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Frees a memory region in the process' virtual memory.
            </summary>
            <param name="baseAddress">The address of the region to free.</param>
            <param name="size">The size to free.</param>
            <param name="reserveOnly">Specifies whether or not to only 
            reserve the memory instead of freeing it.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetAffinityMask">
            <summary>
            Gets the processor affinity for the process.
            </summary>
            <returns>The processor affinity for the process.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetAffinityMask(System.Int64@)">
            <summary>
            Gets the processor affinity for the process.
            </summary>
            <param name="systemMask">Receives the processor affinity mask for the system.</param>
            <returns>The processor affinity for the process.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetBasePriority">
            <summary>
            Gets the base priority of the process.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetBasicInformation">
            <summary>
            Gets the process' basic information. This requires QueryLimitedInformation 
            access.
            </summary>
            <returns>A PROCESS_BASIC_INFORMATION structure.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetCommandLine">
            <summary>
            Gets the command line used to start the process. This requires 
            the PROCESS_QUERY_LIMITED_INFORMATION and PROCESS_VM_READ permissions.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetCookie">
            <summary>
            Gets the process' cookie (a random value).
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetCreateTime">
            <summary>
            Gets the creation time of the process.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetCycleTime">
            <summary>
            Gets the number of processor cycles consumed by the process' threads.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetDebugObject">
            <summary>
            Opens the debug object associated with the process.
            </summary>
            <returns>A debug object handle.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetDepStatus">
            <summary>
            Gets the process' DEP policy.
            </summary>
            <returns>A DepStatus enum.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetEnvironmentVariables">
            <summary>
            Gets the process' environment variables. This requires the 
            PROCESS_QUERY_INFORMATION and PROCESS_VM_READ permissions.
            </summary>
            <returns>A dictionary of variables.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetExitCode">
            <summary>
            Gets the process' exit code.
            </summary>
            <returns>A number.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetExitStatus">
            <summary>
            Gets the process' exit status.
            </summary>
            <returns>A NT status value.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetExitTime">
            <summary>
            Gets the exit time of the process.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetGuiResources(System.Boolean)">
            <summary>
            Gets a GUI handle count.
            </summary>
            <param name="userObjects">If true, returns the number of USER handles. Otherwise, returns 
            the number of GDI handles.</param>
            <returns>A handle count.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetHandleCount">
            <summary>
            Gets the number of handles opened by the process.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetHandles">
            <summary>
            Gets the handles owned by the process.
            </summary>
            <returns>An array of handle information structures.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetHandleTraces">
            <summary>
            Gets a collection of handle stack traces. This requires 
            PROCESS_QUERY_INFORMATION access.
            </summary>
            <returns>A collection of handle stack traces.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetHandleTraces(System.IntPtr)">
            <summary>
            Gets a collection of handle stack traces. This requires 
            PROCESS_QUERY_INFORMATION access.
            </summary>
            <param name="handle">
            A handle to the stack trace to retrieve. If this parameter is 
            zero, all stack traces will be retrieved.
            </param>
            <returns>A collection of handle stack traces.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetHeap">
            <summary>
            Gets the process' default heap.
            </summary>
            <returns>A pointer to a heap.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetImageFileName">
            <summary>
            Gets the file name of the process' image. This requires 
            QueryLimitedInformation access.
            </summary>
            <returns>A file name, in native format.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetImageFileNameWin32">
            <summary>
            Gets the file name of the process' image. This requires 
            QueryLimitedInformation access.
            </summary>
            <returns>A file name, in DOS format.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetInformationInt32(ProcessHacker.Native.Api.ProcessInformationClass)">
            <summary>
            Gets information about the process in an Int32.
            </summary>
            <param name="infoClass">The class of information to retrieve.</param>
            <returns>An int.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetInformationIntPtr(ProcessHacker.Native.Api.ProcessInformationClass)">
            <summary>
            Gets information about the process in an IntPtr.
            </summary>
            <param name="infoClass">The class of information to retrieve.</param>
            <returns>An IntPtr.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetIoPriority">
            <summary>
            Gets the process' I/O priority, ranging from 0-7.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetIoStatistics">
            <summary>
            Gets I/O statistics for the process.
            </summary>
            <returns>A IoCounters structure.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetJobObject(ProcessHacker.Native.Security.JobObjectAccess)">
            <summary>
            Opens the job object associated with the process.
            </summary>
            <returns>A job object handle.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetKnownProcessType">
            <summary>
            Gets the type of well-known process.
            </summary>
            <returns>A known process type.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetMainModule">
            <summary>
            Gets the main module of the process. This requires the 
            PROCESS_QUERY_INFORMATION and PROCESS_VM_READ permissions.
            </summary>
            <returns>A ProcessModule.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetMappedFileName(System.IntPtr)">
            <summary>
            Gets the name of a file which the process has mapped.
            </summary>
            <param name="address">The address of the mapped section.</param>
            <returns>A filename.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetMemoryStatistics">
            <summary>
            Gets memory statistics for the process.
            </summary>
            <returns>A VmCounters structure.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetModules">
            <summary>
            Gets the modules loaded by the process. This requires the 
            PROCESS_QUERY_INFORMATION and PROCESS_VM_READ permissions.
            </summary>
            <returns>An array of ProcessModule objects.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetNextProcess(ProcessHacker.Native.Security.ProcessAccess)">
            <summary>
            Opens the next linked process.
            </summary>
            <param name="access">The desired access to the next process.</param>
            <returns>A process handle.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetNextThread(ProcessHacker.Native.Objects.ThreadHandle,ProcessHacker.Native.Security.ThreadAccess)">
            <summary>
            Opens the next linked thread belonging to the process.
            </summary>
            <param name="threadHandle">A thread handle. You may specify null.</param>
            <param name="access">The desired access to the next thread.</param>
            <returns>A thread handle.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetPagePriority">
            <summary>
            Gets the process' page priority, ranging from 0-7.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetParentPid">
            <summary>
            Gets the process' parent's process ID. This requires 
            the PROCESS_QUERY_LIMITED_INFORMATION permission.
            </summary>
            <returns>The process ID.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetPebString(ProcessHacker.Native.Objects.PebOffset)">
            <summary>
            Reads a UNICODE_STRING from the process' process environment block.
            </summary>
            <param name="offset">The offset to the UNICODE_STRING structure.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetPosixCommandLine">
            <summary>
            Gets the command line used to start the process. This 
            function is only valid for POSIX processes.
            </summary>
            <returns>A command line string.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetPriorityClass">
            <summary>
            Gets the process' priority class.
            </summary>
            <returns>A ProcessPriorityClass enum.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetProcessId">
            <summary>
            Gets the process' unique identifier.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetSessionId">
            <summary>
            Gets the process' session ID.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetTimes">
            <summary>
            Gets an array of times for the process.
            </summary>
            <returns>An array of times: creation time, exit time, kernel time, user time.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetToken">
            <summary>
            Opens and returns a handle to the process' token. This requires 
            PROCESS_QUERY_LIMITED_INFORMATION access.
            </summary>
            <returns>A handle to the process' token.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.GetToken(ProcessHacker.Native.Security.TokenAccess)">
            <summary>
            Opens and returns a handle to the process' token. This requires 
            PROCESS_QUERY_LIMITED_INFORMATION access.
            </summary>
            <param name="access">The desired access to the token.</param>
            <returns>A handle to the process' token.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.InjectDll(System.String)">
            <summary>
            Forces the process to load the specified library.
            </summary>
            <param name="path">The path to the library.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.InjectDll(System.String,System.UInt32)">
            <summary>
            Forces the process to load the specified library.
            </summary>
            <param name="path">The path to the library.</param>
            <param name="timeout">The timeout, in milliseconds, for the process to load the library.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.IsBeingDebugged">
            <summary>
            Gets whether the process is currently being debugged. This requires 
            QueryInformation access.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.IsCritical">
            <summary>
            Gets whether the system will crash upon the process being terminated.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.IsInJob">
            <summary>
            Determines whether the process is running in a job.
            </summary>
            <returns>A boolean.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.IsInJob(ProcessHacker.Native.Objects.JobObjectHandle)">
            <summary>
            Determines whether the process is running in the specified job.
            </summary>
            <param name="jobObjectHandle">The job object to check.</param>
            <returns>A boolean.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.IsNtVdmProcess">
            <summary>
            Gets whether the process is a NTVDM process.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.IsPosix">
            <summary>
            Gets whether the process is using the POSIX subsystem.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.IsPriorityBoostEnabled">
            <summary>
            Gets whether the process has priority boost enabled.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.IsWow64">
            <summary>
            Gets whether the process is running under WOW64.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.ProtectMemory(System.IntPtr,System.Int32,ProcessHacker.Native.Api.MemoryProtection)">
            <summary>
            Sets the protection for a page in the process.
            </summary>
            <param name="baseAddress">The address to modify.</param>
            <param name="size">The number of bytes to modify.</param>
            <param name="protection">The new memory protection.</param>
            <returns>The old memory protection.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.QueryMemory(System.IntPtr)">
            <summary>
            Gets information about the memory region starting at the specified address.
            </summary>
            <param name="baseAddress">The address to query.</param>
            <returns>A MEMORY_BASIC_INFORMATION structure.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.ReadMemory(System.IntPtr,System.Int32)">
            <summary>
            Reads data from the process' virtual memory.
            </summary>
            <param name="baseAddress">The offset at which to begin reading.</param>
            <param name="length">The length, in bytes, to read.</param>
            <returns>An array of bytes.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.ReadMemory(System.IntPtr,System.Byte[],System.Int32)">
            <summary>
            Reads data from the process' virtual memory.
            </summary>
            <param name="baseAddress">The offset at which to begin reading.</param>
            <param name="buffer">The buffer to write to.</param>
            <param name="length">The length to read.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.ReadMemory(System.IntPtr,System.Void*,System.Int32)">
            <summary>
            Reads data from the process' virtual memory.
            </summary>
            <param name="baseAddress">The offset at which to begin reading.</param>
            <param name="buffer">The buffer to write to.</param>
            <param name="length">The length to read.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.ReadMemory(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Reads data from the process' virtual memory.
            </summary>
            <param name="baseAddress">The offset at which to begin reading.</param>
            <param name="buffer">The buffer to write to.</param>
            <param name="length">The length to read.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.RemoteCall(System.IntPtr,System.IntPtr[])">
            <summary>
            Calls the specified function in the context of the process.
            </summary>
            <param name="address">The function to call.</param>
            <param name="arguments">The arguments to pass to the function.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.RemoveDebug(ProcessHacker.Native.Objects.DebugObjectHandle)">
            <summary>
            Stops debugging the process attached to the specified debug object. This requires 
            PROCESS_SUSPEND_RESUME access.
            </summary>
            <param name="debugObjectHandle">The debug object which was used to debug the process.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.Resume">
            <summary>
            Resumes the process. This requires PROCESS_SUSPEND_RESUME access.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.SetAffinityMask(System.Int64)">
            <summary>
            Sets the processor affinity for the process.
            </summary>
            <param name="processMask">The processor affinity mask.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.SetBasePriority(System.Int32)">
            <summary>
            Sets the process' base priority.
            </summary>
            <param name="basePriority">The process' base priority.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.SetCritical(System.Boolean)">
            <summary>
            Sets whether the system will crash upon the process being terminated. 
            This function requires SeTcbPrivilege.
            </summary>
            <param name="critical">Whether the system will crash upon the process being terminated.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.SetDepStatus(ProcessHacker.Native.Objects.DepStatus)">
            <summary>
            Sets the process' DEP policy.
            </summary>
            <param name="depStatus">The DEP options.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.SetInformationInt32(ProcessHacker.Native.Api.ProcessInformationClass,System.Int32)">
            <summary>
            Sets information about the process in an Int32.
            </summary>
            <param name="infoClass">The class of information to set.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.SetModuleReferenceCount(System.IntPtr,System.UInt16)">
            <summary>
            Sets the reference count of a module.
            </summary>
            <param name="baseAddress">The base address of the module.</param>
            <param name="count">The new reference count.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.SetPriorityBoost(System.Boolean)">
            <summary>
            Sets the process' priority boost.
            </summary>
            <param name="enabled">Whether priority boost will be enabled.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.SetPriorityClass(ProcessHacker.Native.Api.ProcessPriorityClass)">
            <summary>
            Sets the process' priority class.
            </summary>
            <param name="priorityClass">The process' priority class.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.Suspend">
            <summary>
            Suspends the process. This requires PROCESS_SUSPEND_RESUME access.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.Terminate">
            <summary>
            Terminates the process. This requires PROCESS_TERMINATE access.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.Terminate(ProcessHacker.Native.Api.NtStatus)">
            <summary>
            Terminates the process. This requires PROCESS_TERMINATE access.
            </summary>
            <param name="exitStatus">The exit status.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.WriteDump(System.String)">
            <summary>
            Writes a minidump of the process to the specified file.
            </summary>
            <param name="fileName">The destination file.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.WriteDump(System.String,ProcessHacker.Native.Api.MinidumpType)">
            <summary>
            Writes a minidump of the process to the specified file.
            </summary>
            <param name="fileName">The destination file.</param>
            <param name="type">The type of minidump to write.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.WriteDump(ProcessHacker.Native.Objects.FileHandle,ProcessHacker.Native.Api.MinidumpType)">
            <summary>
            Writes a minidump of the process to the specified file.
            </summary>
            <param name="fileHandle">A handle to the destination file.</param>
            <param name="type">The type of minidump to write.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.WriteMemory(System.IntPtr,System.Byte[])">
            <summary>
            Writes data to the process' virtual memory.
            </summary>
            <param name="baseAddress">The offset at which to begin writing.</param>
            <param name="buffer">The data to write.</param>
            <returns>The length, in bytes, that was written.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.WriteMemory(System.IntPtr,System.Void*,System.Int32)">
            <summary>
            Writes data to the process' virtual memory.
            </summary>
            <param name="baseAddress">The offset at which to begin writing.</param>
            <param name="buffer">The data to write.</param>
            <param name="length">The length to be written.</param>
            <returns>The length, in bytes, that was written.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ProcessHandle.WriteMemory(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Writes data to the process' virtual memory.
            </summary>
            <param name="baseAddress">The offset at which to begin writing.</param>
            <param name="buffer">The data to write.</param>
            <param name="length">The length to be written.</param>
            <returns>The length, in bytes, that was written.</returns>
        </member>
        <member name="T:ProcessHacker.Native.Objects.ProcessHandleTrace">
            <summary>
            Represents a stack trace collected during a handle trace event.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Objects.ProcessHandleTrace.ClientId">
            <summary>
            The client ID of the thread which produced the event.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Objects.ProcessHandleTrace.Handle">
            <summary>
            The handle value associated with the event.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Objects.ProcessHandleTrace.Stack">
            <summary>
            A stack trace of the thread at the time of the event.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Objects.ProcessHandleTrace.Type">
            <summary>
            The type of handle trace event.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Objects.ProcessHandleTraceCollection">
            <summary>
            Represents a collection of handle trace events.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Objects.ProcessHandleTraceCollection.Handle">
            <summary>
            A unique handle representing the collection.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Objects.ProcessModule">
            <summary>
            Represents a module loaded by a process.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Objects.ProcessModule.BaseAddress">
            <summary>
            The base address of the module.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Objects.ProcessModule.Size">
            <summary>
            The size of the module.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Objects.ProcessModule.EntryPoint">
            <summary>
            The entry point of the module (usually its DllMain function).
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Objects.ProcessModule.Flags">
            <summary>
            The flags set by the NT loader for this module.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Objects.ProcessModule.BaseName">
            <summary>
            The base name of the module (e.g. module.dll).
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Objects.ProcessModule.FileName">
            <summary>
            The file name of the module (e.g. C:\Windows\system32\module.dll).
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Objects.DepStatus">
            <summary>
            Specifies the DEP status of a process.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Objects.DepStatus.Enabled">
            <summary>
            DEP is enabled.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Objects.DepStatus.Permanent">
            <summary>
            DEP is permanently enabled or disabled and cannot
            be enabled or disabled.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Objects.DepStatus.AtlThunkEmulationDisabled">
            <summary>
            DEP is enabled with DEP-ATL thunk emulation disabled.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Objects.KnownProcess">
            <summary>
            A well-known Windows process.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Objects.KnownProcess.None">
            <summary>
            The process is not well-known.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Objects.KnownProcess.Idle">
            <summary>
            System Idle Process.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Objects.KnownProcess.System">
            <summary>
            NT Kernel &amp; System.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Objects.KnownProcess.SessionManager">
            <summary>
            Windows Session Manager (smss)
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Objects.KnownProcess.WindowsSubsystem">
            <summary>
            Client Server Runtime Process (csrss)
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Objects.KnownProcess.WindowsStartup">
            <summary>
            Windows Start-Up Application (wininit)
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Objects.KnownProcess.ServiceControlManager">
            <summary>
            Services and Controller app (services)
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Objects.KnownProcess.LocalSecurityAuthority">
            <summary>
            Local Security Authority Process (lsass)
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Objects.KnownProcess.LocalSessionManager">
            <summary>
            Local Session Manager Service (lsm)
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Objects.PebOffset">
            <summary>
            Specifies an offset in a process' process environment block (PEB).
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Objects.PebOffset.CurrentDirectoryPath">
            <summary>
            The current directory of the process. This may, as the name 
            implies, change very often.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Objects.PebOffset.DllPath">
            <summary>
            A copy of the PATH environment variable for the process.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Objects.PebOffset.ImagePathName">
            <summary>
            The image file name, in kernel format (e.g. \\?\C:\...,
            \SystemRoot\..., \Device\Harddisk1\...).
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Objects.PebOffset.CommandLine">
            <summary>
            The command used to start the program, including arguments.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Objects.PebOffset.WindowTitle">
            <summary>
            Usually blank.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Objects.PebOffset.DesktopName">
            <summary>
            For interactive programs, contains the window station and 
            desktop name of the first thread that was started, e.g. 
            WinSta0\Default.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Objects.PebOffset.ShellInfo">
            <summary>
            Usually blank.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Objects.PebOffset.RuntimeData">
            <summary>
            Usually blank.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Objects.RemoteHandle">
            <summary>
            Represents a handle owned by another process.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.RemoteHandle.GetHandle(System.Int32)">
            <summary>
            Duplicates the handle owned by the process.
            </summary>
            <param name="access">The desired access to the handle's object.</param>
            <returns>A local copy of the handle.</returns>
            <remarks>
            We can't use a template for this because of C#'s rules for template 
            restrictions. Specifically, we can only specify that the type must have a
            constructor with 0 arguments, but no more.
            </remarks>
        </member>
        <member name="T:ProcessHacker.Native.Objects.RemoteTokenHandle">
            <summary>
            Represents a token handle owned by another process.
            </summary>
            <remarks>
            This is a wrapper class so that we can view information 
            about tokens other processes have handles to. TokenProperties 
            only takes an IWithToken object.
            </remarks>
        </member>
        <member name="T:ProcessHacker.Native.Objects.ServiceBaseHandle`1">
            <summary>
            Represents a handle managed by the Windows service manager.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Objects.ServiceHandle">
            <summary>
            Represents a handle to a Windows service.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ServiceHandle.FromHandle(System.IntPtr)">
            <summary>
            Creates a service handle using an existing handle. 
            The handle will not be closed automatically.
            </summary>
            <param name="handle">The handle value.</param>
            <returns>The service handle.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ServiceHandle.#ctor(System.String)">
            <summary>
            Creates a new service handle.
            </summary>
            <param name="serviceName">The name of the service to open.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ServiceHandle.#ctor(System.String,ProcessHacker.Native.Security.ServiceAccess)">
            <summary>
            Creates a new service handle.
            </summary>
            <param name="serviceName">The name of the service to open.</param>
            <param name="access">The desired access to the service.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ServiceHandle.Control(ProcessHacker.Native.Api.ServiceControl)">
            <summary>
            Sends a control message to the service.
            </summary>
            <param name="control">The message.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ServiceHandle.Delete">
            <summary>
            Deletes the service.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ServiceHandle.GetConfig">
            <summary>
            Gets the service's configuration.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ServiceHandle.GetDescription">
            <summary>
            Gets the service's description.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ServiceHandle.GetStatus">
            <summary>
            Gets the status of the service.
            </summary>
            <returns>A SERVICE_STATUS_PROCESS structure.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ServiceHandle.Start">
            <summary>
            Starts the service.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Objects.ServiceManagerHandle">
            <summary>
            Represents a handle to the Windows service manager.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ServiceManagerHandle.#ctor(ProcessHacker.Native.Security.ScManagerAccess)">
            <summary>
            Connects to the Windows service manager.
            </summary>
            <param name="access">The desired access to the service manager.</param>
        </member>
        <member name="T:ProcessHacker.Native.Objects.ThreadHandle">
            <summary>
            Represents a handle to a Windows thread.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Objects.ThreadHandle.Current">
            <summary>
            Gets a handle to the current thread.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.FromHandle(System.IntPtr)">
            <summary>
            Creates a thread handle using an existing handle. 
            The handle will not be closed automatically.
            </summary>
            <param name="handle">The handle value.</param>
            <returns>The thread handle.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetCurrent">
            <summary>
            Gets a handle to the current thread.
            </summary>
            <returns>A thread handle.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetCurrentCid">
            <summary>
            Gets the client ID of the current thread.
            </summary>
            <returns>A client ID.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetCurrentId">
            <summary>
            Gets the ID of the current thread.
            </summary>
            <returns>A thread ID.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetCurrentTeb">
            <summary>
            Gets a pointer to the current thread's environment block.
            </summary>
            <returns>A pointer to the current TEB.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.OpenCurrent(ProcessHacker.Native.Security.ThreadAccess)">
            <summary>
            Opens the current thread.
            </summary>
            <param name="access">The desired access to the thread.</param>
            <returns>A handle to the current thread.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.RegisterTerminationPort(ProcessHacker.Native.Objects.PortHandle)">
            <summary>
            Registers a port which will be notified when the current thread terminates.
            </summary>
            <param name="portHandle">A handle to a port.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.Sleep(System.Int64,System.Boolean)">
            <summary>
            Sleeps the current thread.
            </summary>
            <param name="timeout">The timeout, in 100ns units.</param>
            <param name="relative">Whether the timeout value is relative.</param>
            <returns>A NT status value.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.Sleep(System.Boolean,System.Int64,System.Boolean)">
            <summary>
            Sleeps the current thread.
            </summary>
            <param name="alertable">
            Whether user-mode APCs can be delivered during the wait.
            </param>
            <param name="timeout">The timeout, in 100ns units.</param>
            <param name="relative">Whether the timeout value is relative.</param>
            <returns>A NT status value.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.TestAlert">
            <summary>
            Checks whether the current thread is in an alerted state and 
            executes any pending user-mode APCs.
            </summary>
            <returns>
            NtStatus.Alerted if the current thread was in an alerted state, 
            otherwise NtStatus.Success.
            </returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.Yield">
            <summary>
            Switches to another thread.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.#ctor(System.Int32)">
            <summary>
            Opens a thread.
            </summary>
            <param name="tid">The ID of the thread to open.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.#ctor(System.Int32,ProcessHacker.Native.Security.ThreadAccess)">
            <summary>
            Opens a thread.
            </summary>
            <param name="tid">The ID of the thread to open.</param>
            <param name="access">The desired access to the thread.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.Alert">
            <summary>
            Puts the thread in an alerted state.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.AlertResume">
            <summary>
            Resumes the thread in an alerted state.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.CaptureKernelStack">
            <summary>
            Captures a kernel-mode stack trace for the thread.
            </summary>
            <returns>An array of function addresses.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.CaptureKernelStack(System.Int32)">
            <summary>
            Captures a kernel-mode stack trace for the thread.
            </summary>
            <param name="skipCount">The number of frames to skip.</param>
            <returns>An array of function addresses.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.CaptureUserStack">
            <summary>
            Captures a user-mode stack trace for the thread.
            </summary>
            <returns>An array of stack frames.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.CaptureUserStack(System.Int32)">
            <summary>
            Captures a user-mode stack trace for the thread.
            </summary>
            <param name="skipCount">The number of frames to skip.</param>
            <returns>An array of stack frames.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.DangerousTerminate(ProcessHacker.Native.Api.NtStatus)">
            <summary>
            Attempts to terminate the thread using a dangerous method. This 
            operation may cause the system to crash.
            </summary>
            <param name="exitStatus">The exit status.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetBasePriority">
            <summary>
            Gets the thread's base priority.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetBasePriorityWin32">
            <summary>
            Gets the thread's base priority.
            </summary>
            <returns>A ThreadPriorityLevel enum.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetBasicInformation">
            <summary>
            Gets the thread's basic information.
            </summary>
            <returns>A THREAD_BASIC_INFORMATION structure.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetContext(ProcessHacker.Native.Api.ContextFlags)">
            <summary>
            Gets the thread's context.
            </summary>
            <returns>A CONTEXT struct.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetContext(ProcessHacker.Native.Api.Context@)">
            <summary>
            Gets the thread's context.
            </summary>
            <param name="context">A Context structure. The ContextFlags must be set appropriately.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetContext(ProcessHacker.Native.Api.ContextFlagsAmd64)">
            <summary>
            Gets the thread's context.
            </summary>
            <returns>A CONTEXT struct.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetContext(ProcessHacker.Native.Api.ContextAmd64@)">
            <summary>
            Gets the thread's context.
            </summary>
            <param name="context">A Context structure. The ContextFlags must be set appropriately.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetContextWow64(ProcessHacker.Native.Api.Context@)">
            <summary>
            Gets the thread's x86 context. The thread's process must be running 
            under WOW64.
            </summary>
            <param name="context">A Context structure. The ContextFlags must be set appropriately.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetCycleTime">
            <summary>
            Gets the number of processor cycles consumed by the thread.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetExitCode">
            <summary>
            Gets the thread's exit code.
            </summary>
            <returns>A number.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetExitStatus">
            <summary>
            Gets the thread's exit status.
            </summary>
            <returns>A NT status value.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetIoPriority">
            <summary>
            Gets the thread's I/O priority.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetLastSystemCall">
            <summary>
            Gets the last system call the thread made.
            </summary>
            <returns>A system call number.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetLastSystemCall(System.Int32@)">
            <summary>
            Gets the last system call the thread made.
            </summary>
            <param name="firstArgument">The first argument to the last system call.</param>
            <returns>A system call number.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetPagePriority">
            <summary>
            Gets the thread's page priority.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetPriority">
            <summary>
            Gets the thread's priority.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetProcess(ProcessHacker.Native.Security.ProcessAccess)">
            <summary>
            Opens the thread's process.
            </summary>
            <returns>A process handle.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetProcessId">
            <summary>
            Gets the thread's parent process' unique identifier.
            </summary>
            <returns>A process ID.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetThreadId">
            <summary>
            Gets the thread's unique identifier.
            </summary>
            <returns>A thread ID.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetToken">
            <summary>
            Opens and returns a handle to the thread's token.
            </summary>
            <returns>A handle to the thread's token.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetToken(ProcessHacker.Native.Security.TokenAccess)">
            <summary>
            Opens and returns a handle to the thread's token.
            </summary>
            <param name="access">The desired access to the token.</param>
            <returns>A handle to the thread's token.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.GetWin32StartAddress">
            <summary>
            Gets the thread's Win32 start address.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.Impersonate(ProcessHacker.Native.Objects.ThreadHandle,ProcessHacker.Native.Api.SecurityImpersonationLevel)">
            <summary>
            Causes the thread to impersonate a client thread.
            </summary>
            <param name="clientThreadHandle">A handle to a client thread.</param>
            <param name="impersonationLevel">The impersonation level to request.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.ImpersonateAnonymous">
            <summary>
            Causes the thread to impersonate the anonymous account.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.IsCritical">
            <summary>
            Gets whether the system will break (crash) upon the thread terminating.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.IsIoPending">
            <summary>
            Gets whether any I/O request packets (IRPs) are still pending for the thread.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.IsLastThread">
            <summary>
            Gets whether the thread is the last in its process.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.IsPriorityBoostEnabled">
            <summary>
            Gets whether priority boost is enabled for the thread.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.IsTerminated">
            <summary>
            Gets whether the thread has terminated.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.QueueApc(System.IntPtr,System.IntPtr)">
            <summary>
            Adds an user-mode asynchronous procedure call (APC) to the thread's APC queue.
            This requires THREAD_SET_CONTEXT access.
            </summary>
            <param name="address">The address of the APC procedure.</param>
            <param name="parameter">The parameter to pass to the procedure.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.QueueApc(ProcessHacker.Native.Api.ApcRoutine,System.IntPtr)">
            <summary>
            Adds an user-mode asynchronous procedure call (APC) to the thread's APC queue.
            This requires THREAD_SET_CONTEXT access.
            </summary>
            <param name="action">The delegate to execute..</param>
            <param name="parameter">The parameter to pass to the procedure.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.QueueApc(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Queues a user-mode asynchronous procedure call (APC) to the thread.
            </summary>
            <param name="address">The address of the function to execute.</param>
            <param name="param1">The first parameter to pass to the function.</param>
            <param name="param2">The second parameter to pass to the function.</param>
            <param name="param3">The third parameter to pass to the function.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.Resume">
            <summary>
            Resumes the thread.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.SetBasePriority(System.Int32)">
            <summary>
            Sets the thread's base priority.
            </summary>
            <param name="basePriority">The thread's base priority.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.SetBasePriorityWin32(System.Diagnostics.ThreadPriorityLevel)">
            <summary>
            Sets the thread's base priority.
            </summary>
            <param name="basePriority">The base priority of the thread.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.SetContext(ProcessHacker.Native.Api.Context)">
            <summary>
            Sets the thread's context.
            </summary>
            <param name="context">A CONTEXT struct.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.SetContext(ProcessHacker.Native.Api.ContextAmd64)">
            <summary>
            Sets the thread's context.
            </summary>
            <param name="context">A CONTEXT struct.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.SetContextWow64(ProcessHacker.Native.Api.Context)">
            <summary>
            Sets the thread's x86 context. The thread's process must 
            be running under WOW64.
            </summary>
            <param name="context">A CONTEXT struct.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.SetCritical(System.Boolean)">
            <summary>
            Sets whether the thread is critical.
            </summary>
            <param name="critical">Whether the thread should be critical.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.SetPriority(System.Int32)">
            <summary>
            Sets the thread's priority.
            </summary>
            <param name="priority">The thread's priority.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.SetPriorityBoost(System.Boolean)">
            <summary>
            Sets the thread's priority boost.
            </summary>
            <param name="enabled">Whether priority boost will be enabled.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.SetToken(ProcessHacker.Native.Objects.TokenHandle)">
            <summary>
            Sets the thread's impersonation token.
            </summary>
            <param name="tokenHandle">
            A handle to a token. Specify null to cause the thread to stop 
            impersonating.
            </param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.Suspend">
            <summary>
            Suspends the thread.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.Terminate">
            <summary>
            Terminates the thread.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.Terminate(ProcessHacker.Native.Api.NtStatus)">
            <summary>
            Terminates the thread.
            </summary>
            <param name="exitStatus">The exit status.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.WalkStack(ProcessHacker.Native.Objects.ThreadHandle.WalkStackDelegate)">
            <summary>
            Walks the call stack for the thread.
            </summary>
            <param name="walkStackCallback">A callback to execute.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.WalkStack(ProcessHacker.Native.Objects.ThreadHandle.WalkStackDelegate,ProcessHacker.Native.OSArch)">
            <summary>
            Walks the call stack for the thread.
            </summary>
            <param name="walkStackCallback">A callback to execute.</param>
            <param name="architecture">
            The type of stack walk. On 32-bit systems, this value is ignored. 
            On 64-bit systems, this value can be set to I386 to walk the 
            32-bit stack.
            </param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.WalkStack(ProcessHacker.Native.Objects.ProcessHandle,ProcessHacker.Native.Objects.ThreadHandle.WalkStackDelegate)">
            <summary>
            Walks the call stack for the thread.
            </summary>
            <param name="parentProcess">A handle to the thread's parent process.</param>
            <param name="walkStackCallback">A callback to execute.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.ThreadHandle.WalkStack(ProcessHacker.Native.Objects.ProcessHandle,ProcessHacker.Native.Objects.ThreadHandle.WalkStackDelegate,ProcessHacker.Native.OSArch)">
            <summary>
            Walks the call stack for the thread.
            </summary>
            <param name="parentProcess">A handle to the thread's parent process.</param>
            <param name="walkStackCallback">A callback to execute.</param>
            <param name="architecture">
            The type of stack walk. On 32-bit systems, this value is ignored. 
            On 64-bit systems, this value can be set to I386 to walk the 
            32-bit stack.
            </param>
        </member>
        <member name="T:ProcessHacker.Native.Objects.TokenHandle">
            <summary>
            Represents a handle to a Windows token.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TokenHandle.FromHandle(System.IntPtr)">
            <summary>
            Creates a token handle using an existing handle. 
            The handle will not be closed automatically.
            </summary>
            <param name="handle">The handle value.</param>
            <returns>The token handle.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TokenHandle.#ctor(ProcessHacker.Native.Objects.ProcessHandle,ProcessHacker.Native.Security.TokenAccess)">
            <summary>
            Creates a new token handle from a process.
            </summary>
            <param name="handle">The process handle.</param>
            <param name="access">The desired access to the token.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TokenHandle.#ctor(ProcessHacker.Native.Objects.ThreadHandle,ProcessHacker.Native.Security.TokenAccess)">
            <summary>
            Creates a new token handle from a thread.
            </summary>
            <param name="handle">The thread handle.</param>
            <param name="access">The desired access to the token.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TokenHandle.#ctor(ProcessHacker.Native.Objects.ThreadHandle,ProcessHacker.Native.Security.TokenAccess,System.Boolean)">
            <summary>
            Creates a new token handle from a thread.
            </summary>
            <param name="handle">The thread handle.</param>
            <param name="access">The desired access to the token.</param>
            <param name="openAsSelf">If the thread is currently impersonating, opens the original token.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TokenHandle.Duplicate(ProcessHacker.Native.Security.TokenAccess,ProcessHacker.Native.Api.SecurityImpersonationLevel,ProcessHacker.Native.Api.TokenType)">
            <summary>
            Duplicates the token.
            </summary>
            <param name="access">The desired access to the new token.</param>
            <param name="impersonationLevel">The new impersonation level.</param>
            <param name="type">The new token type.</param>
            <returns>A new token.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TokenHandle.Equals(ProcessHacker.Native.Objects.TokenHandle)">
            <summary>
            Determins whether the token is the same as another token.
            </summary>
            <param name="other">The other token.</param>
            <returns>Whether they are equal.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TokenHandle.GetElevationType">
            <summary>
            Gets the elevation type of the token.
            </summary>
            <returns>A TOKEN_ELEVATION_TYPE enum.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TokenHandle.GetGroups">
            <summary>
            Gets the token's groups.
            </summary>
            <returns>A TokenGroupsData struct.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TokenHandle.GetOwner">
            <summary>
            Gets the token's owner.
            </summary>
            <returns>A WindowsSID instance.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TokenHandle.GetPrimaryGroup">
            <summary>
            Gets the token's primary group.
            </summary>
            <returns>A WindowsSID instance.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TokenHandle.GetPrivileges">
            <summary>
            Gets the token's privileges.
            </summary>
            <returns>A TOKEN_PRIVILEGES structure.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TokenHandle.GetRestrictingGroups">
            <summary>
            Gets the restricted token's restricting SIDs.
            </summary>
            <returns>A TokenGroupsData struct.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TokenHandle.GetSessionId">
            <summary>
            Gets the token's session ID.
            </summary>
            <returns>The session ID.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TokenHandle.GetSource">
            <summary>
            Gets the token's source.
            </summary>
            <returns>A TOKEN_SOURCE struct.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TokenHandle.GetStatistics">
            <summary>
            Gets statistics about the token.
            </summary>
            <returns>A TOKEN_STATISTICS structure.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TokenHandle.GetUser">
            <summary>
            Gets the token's user.
            </summary>
            <returns>A WindowsSID instance.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TokenHandle.IsElevated">
            <summary>
            Gets whether the token has UAC elevation applied.
            </summary>
            <returns>A boolean.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TokenHandle.IsVirtualizationAllowed">
            <summary>
            Gets whether virtualization is allowed.
            </summary>
            <returns>A boolean.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TokenHandle.IsVirtualizationEnabled">
            <summary>
            Gets whether virtualization is enabled.
            </summary>
            <returns>A boolean.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TokenHandle.SetPrivilege(System.String,ProcessHacker.Native.Api.SePrivilegeAttributes)">
            <summary>
            Sets a privilege's attributes.
            </summary>
            <param name="privilegeName">The name of the privilege.</param>
            <param name="attributes">The new attributes of the privilege.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TokenHandle.SetVirtualizationEnabled(System.Boolean)">
            <summary>
            Sets whether virtualization is enabled.
            </summary>
            <param name="enabled">Whether virtualization is enabled.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.TokenHandle.TrySetPrivilege(System.String,ProcessHacker.Native.Api.SePrivilegeAttributes)">
            <summary>
            Sets a privilege's attributes.
            </summary>
            <param name="privilegeName">The name of the privilege.</param>
            <param name="attributes">The new attributes of the privilege.</param>
            <returns>True if the function succeeded, otherwise false.</returns>
        </member>
        <member name="T:ProcessHacker.Native.Objects.NativeHandle">
            <summary>
            Represents a generic Windows handle which acts as a kernel handle by default.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.#ctor">
            <summary>
            Creates a new, invalid handle. You must set the handle using the Handle property.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.#ctor(System.IntPtr)">
            <summary>
            Creates a new handle using the specified value. The handle will be closed when 
            this object is disposed or garbage-collected.
            </summary>
            <param name="handle">The handle value.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Creates a new handle using the specified value. If owned is set to false, the 
            handle will not be closed automatically.
            </summary>
            <param name="handle">The handle value.</param>
            <param name="owned">Specifies whether the handle will be closed automatically.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.Close">
            <summary>
            Closes the handle. This method must not be called directly; instead, 
            override this method in a derived class if your handle must be closed 
            with a method other than CloseHandle.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Objects.NativeHandle.Handle">
            <summary>
            Gets the handle value.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.Equals(System.Object)">
            <summary>
            Determines if the specified object is equal to the current handle.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>Whether the two objects are equal.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.Equals(ProcessHacker.Native.Objects.NativeHandle)">
            <summary>
            Determines if the specified handle is equal to the current handle.
            </summary>
            <param name="obj">The handle to compare.</param>
            <returns>Whether the two handles are equal.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.GetHandleFlags">
            <summary>
            Gets certain information about the handle.
            </summary>
            <returns>A HANDLE_FLAGS value.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.GetHashCode">
            <summary>
            Gets a unique hash code for the handle.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.GetObjectName">
            <summary>
            Gets the handle's name.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.GetObjectTypeName">
            <summary>
            Gets the handle's type name.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.GetSecurity(ProcessHacker.Native.Api.SecurityInformation)">
            <summary>
            Gets the security descriptor of the object.
            </summary>
            <param name="securityInformation">The information to retrieve.</param>
            <returns>A security descriptor.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.GetSecurity(ProcessHacker.Native.Api.SeObjectType,ProcessHacker.Native.Api.SecurityInformation)">
            <summary>
            Gets the security descriptor of the object.
            </summary>
            <param name="objectType">The type of the object.</param>
            <param name="securityInformation">The information to retrieve.</param>
            <returns>A security descriptor.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.MakeObjectPermanent">
            <summary>
            Makes the object referenced by the handle permanent.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.MakeObjectTemporary">
            <summary>
            Makes the object referenced by the handle temporary. The object 
            will be deleted once the last handle to it is closed. This function 
            requires Delete access.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.MarkAsInvalid">
            <summary>
            Marks the handle as invalid. This method must only be called from 
            within a derived class constructor.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.SetHandleFlags(ProcessHacker.Native.Api.Win32HandleFlags,ProcessHacker.Native.Api.Win32HandleFlags)">
            <summary>
            Sets certain information about the handle.
            </summary>
            <param name="mask">Specifies which flags to set.</param>
            <param name="flags">The values of the flags to set.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.SetSecurity(ProcessHacker.Native.Api.SecurityInformation,ProcessHacker.Native.Security.AccessControl.SecurityDescriptor)">
            <summary>
            Sets the security descriptor of the object.
            </summary>
            <param name="securityInformation">The information to modify.</param>
            <param name="securityDescriptor">The security descriptor.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.SetSecurity(ProcessHacker.Native.Api.SeObjectType,ProcessHacker.Native.Api.SecurityInformation,ProcessHacker.Native.Security.AccessControl.SecurityDescriptor)">
            <summary>
            Sets the security descriptor of the object.
            </summary>
            <param name="objectType">The type of the object.</param>
            <param name="securityInformation">The information to modify.</param>
            <param name="securityDescriptor">The security descriptor.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.SignalAndWait(ProcessHacker.Native.Objects.ISynchronizable)">
            <summary>
            Signals the object and waits for another.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.SignalAndWait(ProcessHacker.Native.Objects.ISynchronizable,System.Boolean)">
            <summary>
            Signals the object and waits for another.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.SignalAndWait(ProcessHacker.Native.Objects.ISynchronizable,System.Boolean,System.Int64)">
            <summary>
            Signals the object and waits for another.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.SignalAndWait(ProcessHacker.Native.Objects.ISynchronizable,System.Boolean,System.Int64,System.Boolean)">
            <summary>
            Signals the object and waits for another.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.SwapHandle(System.IntPtr)">
            <summary>
            Closes the current handle and assigns a new handle to the NativeHandle instance.
            </summary>
            <param name="newHandle">The new handle value.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.ToString">
            <summary>
            Gets a string that represents the handle.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.Wait">
            <summary>
            Waits for the object to be signaled.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.Wait(System.Boolean)">
            <summary>
            Waits for the object to be signaled.
            </summary>
            <param name="alertable">
            Whether user-mode APCs can be delivered during the wait.
            </param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.Wait(System.Int64)">
            <summary>
            Waits for the object to be signaled.
            </summary>
            <param name="timeout">The timeout, in 100ns units.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.Wait(System.Boolean,System.Int64)">
            <summary>
            Waits for the object to be signaled.
            </summary>
            <param name="alertable">
            Whether user-mode APCs can be delivered during the wait.
            </param>
            <param name="timeout">The timeout, in 100ns units.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.Wait(System.Int64,System.Boolean)">
            <summary>
            Waits for the object to be signaled.
            </summary>
            <param name="timeout">The timeout, in 100ns units.</param>
            <param name="relative">Whether the timeout value is relative.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle.Wait(System.Boolean,System.Int64,System.Boolean)">
            <summary>
            Waits for the object to be signaled.
            </summary>
            <param name="alertable">
            Whether user-mode APCs can be delivered during the wait.
            </param>
            <param name="timeout">The timeout, in 100ns units.</param>
            <param name="relative">Whether the timeout value is relative.</param>
        </member>
        <member name="T:ProcessHacker.Native.Objects.NativeHandle`1">
            <summary>
            Represents a generic Windows handle which acts as a kernel handle by default.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle`1.#ctor">
            <summary>
            Creates a new, invalid handle. You must set the handle using the Handle property.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle`1.#ctor(System.IntPtr)">
            <summary>
            Creates a new handle using the specified value. The handle will be closed when 
            this object is disposed or garbage-collected.
            </summary>
            <param name="handle">The handle value.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle`1.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Creates a new handle using the specified value. If owned is set to false, the 
            handle will not be closed automatically.
            </summary>
            <param name="handle">The handle value.</param>
            <param name="owned">Specifies whether the handle will be closed automatically.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle`1.#ctor(System.IntPtr,`0)">
            <summary>
            Creates a new handle by duplicating an existing handle.
            </summary>
            <param name="handle">The existing handle.</param>
            <param name="access">The desired access to the object.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle`1.#ctor(ProcessHacker.Native.Objects.ProcessHandle,System.IntPtr,`0)">
            <summary>
            Creates a new handle by duplicating an existing handle from another process.
            </summary>
            <param name="processHandle">A handle to a process. It must have the PROCESS_DUP_HANDLE permission.</param>
            <param name="handle">The existing handle.</param>
            <param name="access">The desired access to the object.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle`1.ChangeAccess(`0)">
            <summary>
            Attempts to duplicate the handle with different access rights.
            </summary>
            <param name="access">The new access rights.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.NativeHandle`1.Duplicate(`0)">
            <summary>
            Duplicates the handle.
            </summary>
            <param name="access">The desired access to the object.</param>
            <returns>A handle.</returns>
        </member>
        <member name="T:ProcessHacker.Native.Objects.GenericHandle">
            <summary>
            Represents a generic Windows handle which acts as a kernel handle by default.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.GenericHandle.#ctor">
            <summary>
            Creates a new, invalid handle. You must set the handle using the Handle property.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Objects.GenericHandle.#ctor(System.IntPtr)">
            <summary>
            Creates a new handle using the specified value. The handle will be closed when 
            this object is disposed or garbage-collected.
            </summary>
            <param name="handle">The handle value.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.GenericHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Creates a new handle using the specified value. If owned is set to false, the 
            handle will not be closed automatically.
            </summary>
            <param name="handle">The handle value.</param>
            <param name="owned">Specifies whether the handle will be closed automatically.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.GenericHandle.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Creates a new handle by duplicating an existing handle.
            </summary>
            <param name="handle">The existing handle.</param>
            <param name="desiredAccess">The desired access to the object.</param>
        </member>
        <member name="M:ProcessHacker.Native.Objects.GenericHandle.#ctor(ProcessHacker.Native.Objects.ProcessHandle,System.IntPtr,System.Int32)">
            <summary>
            Creates a new handle by duplicating an existing handle from another process.
            </summary>
            <param name="processHandle">A handle to a process. It must have the PROCESS_DUP_HANDLE permission.</param>
            <param name="handle">The existing handle.</param>
            <param name="desiredAccess">The desired access to the object.</param>
        </member>
        <member name="T:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor">
            <summary>
            Represents a security descriptor.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor.GetSecurity(System.IntPtr,ProcessHacker.Native.Api.SecurityInformation)">
            <summary>
            Gets the security descriptor of a kernel object.
            </summary>
            <param name="handle">A handle to a kernel object.</param>
            <param name="securityInformation">The information to retrieve.</param>
            <returns>A security descriptor.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor.GetSecurity(System.IntPtr,ProcessHacker.Native.Api.SeObjectType,ProcessHacker.Native.Api.SecurityInformation)">
            <summary>
            Gets the security descriptor of an object.
            </summary>
            <param name="handle">A handle to an object.</param>
            <param name="objectType">The type of the object.</param>
            <param name="securityInformation">The information to retrieve.</param>
            <returns>A security descriptor.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor.SetSecurity(System.IntPtr,ProcessHacker.Native.Api.SecurityInformation,ProcessHacker.Native.Security.AccessControl.SecurityDescriptor)">
            <summary>
            Sets the security descriptor of a kernel object.
            </summary>
            <param name="handle">A handle to a kernel object.</param>
            <param name="securityInformation">The information to modify.</param>
            <param name="securityDescriptor">The security descriptor.</param>
        </member>
        <member name="M:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor.SetSecurity(System.IntPtr,ProcessHacker.Native.Api.SeObjectType,ProcessHacker.Native.Api.SecurityInformation,ProcessHacker.Native.Security.AccessControl.SecurityDescriptor)">
            <summary>
            Sets the security descriptor of an object.
            </summary>
            <param name="handle">A handle to an object.</param>
            <param name="objectType">The type of the object.</param>
            <param name="securityInformation">The information to modify.</param>
            <param name="securityDescriptor">The security descriptor.</param>
        </member>
        <member name="M:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor.#ctor">
            <summary>
            Creates an empty security descriptor.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor.#ctor(ProcessHacker.Native.Security.Sid,ProcessHacker.Native.Security.Sid,ProcessHacker.Native.Security.AccessControl.Acl,ProcessHacker.Native.Security.AccessControl.Acl)">
            <summary>
            Creates a security descriptor with the specified components.
            </summary>
            <param name="owner">A SID representing an owner.</param>
            <param name="group">A SID representing a group.</param>
            <param name="dacl">The discretionary access control list.</param>
            <param name="sacl">The system access control list.</param>
        </member>
        <member name="M:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor.#ctor(ProcessHacker.Native.MemoryRegion)">
            <summary>
            Creates a security descriptor from memory.
            </summary>
            <param name="memory">The memory region to use. This object will be referenced.</param>
        </member>
        <member name="P:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor.ControlFlags">
            <summary>
            Gets or sets the control flags.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor.Dacl">
            <summary>
            Gets or sets the DACL.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor.DaclDefaulted">
            <summary>
            Gets or sets whether the DACL has been defaulted.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor.Group">
            <summary>
            Gets or sets the group.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor.GroupDefaulted">
            <summary>
            Gets or sets whether the group has been defaulted.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor.Length">
            <summary>
            Gets the size of the security descriptor, in bytes.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor.Memory">
            <summary>
            Gets a pointer to the associated memory of the security descriptor.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor.OwnerDefaulted">
            <summary>
            Gets or sets whether the owner has been defaulted.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor.Sacl">
            <summary>
            Gets or sets the SACL.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor.SaclDefaulted">
            <summary>
            Gets or sets whether the SACL has been defaulted.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor.SelfRelative">
            <summary>
            Gets whether the security descriptor is in self-relative form.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor.CheckAccess(ProcessHacker.Native.Objects.TokenHandle,System.Int32,ProcessHacker.Native.Api.GenericMapping,System.Int32@)">
            <summary>
            Checks whether the security descriptor grants a set of access rights to a client.
            </summary>
            <param name="tokenHandle">A handle to a token which represents the client.</param>
            <param name="desiredAccess">The access rights requested by the client.</param>
            <param name="genericMapping">A structure which defines how generic access rights are to be mapped.</param>
            <param name="grantedAccess">A variable which receives the granted access rights.</param>
            <returns>Success if access was granted, otherwise another NT status value.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor.IsValid">
            <summary>
            Checks whether the security descriptor is valid.
            </summary>
            <returns>True if the security descriptor is valid, otherwise false.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Security.AccessControl.SecurityDescriptor.ToSelfRelative">
            <summary>
            Creates a copy of the security descriptor in self-relative form.
            </summary>
            <returns>A new self-relative security descriptor.</returns>
        </member>
        <member name="P:ProcessHacker.Native.Security.Authentication.IAuthenticationPackage.PackageName">
            <summary>
            Gets the name of the authentication package. 
            This name must be recognizable by the LSA.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Security.Authentication.IAuthenticationPackage.GetAuthData">
            <summary>
            Gets a buffer containing authentication information. 
            The format of the information is specific to the 
            package.
            </summary>
            <returns>A memory region containing the information.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Security.Authentication.IAuthenticationPackage.GetProfileData(ProcessHacker.Native.MemoryRegion)">
            <summary>
            Parses a buffer and returns profile-related information 
            specific to the package.
            </summary>
            <param name="buffer">A buffer containing profile information.</param>
            <returns>A package-specific object containing profile information.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Security.Authentication.IAuthenticationPackage.ReadAuthData(ProcessHacker.Native.MemoryRegion)">
            <summary>
            Populates the appropriate class fields from authentication information.
            </summary>
            <returns>A memory region containing the information.</returns>
        </member>
        <member name="T:ProcessHacker.Native.Security.Sid">
            <summary>
            Represents a Windows security identifier (SID).
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Security.Sid.#ctor(System.String)">
            <summary>
            Creates a SID from a string representation.
            </summary>
            <param name="stringSid">The SID string.</param>
        </member>
        <member name="M:ProcessHacker.Native.Security.Sid.#ctor(System.String,System.String)">
            <summary>
            Creates a SID from a string representation.
            </summary>
            <param name="stringSid">The SID string.</param>
            <param name="systemName">The name of the system on which the SID is located.</param>
        </member>
        <member name="M:ProcessHacker.Native.Security.Sid.#ctor(System.IntPtr)">
            <summary>
            Copies the specified SID.
            </summary>
            <param name="sid">A pointer to an existing SID.</param>
        </member>
        <member name="M:ProcessHacker.Native.Security.Sid.#ctor(System.IntPtr,System.String)">
            <summary>
            Copies the specified SID.
            </summary>
            <param name="sid">A pointer to an existing SID.</param>
            <param name="systemName">The name of the system on which the SID is located.</param>
        </member>
        <member name="M:ProcessHacker.Native.Security.Sid.#ctor(ProcessHacker.Native.Api.SidAndAttributes)">
            <summary>
            Copies the specified SID.
            </summary>
            <param name="saa">A SID_AND_ATTRIBUTES structure.</param>
        </member>
        <member name="M:ProcessHacker.Native.Security.Sid.#ctor(System.IntPtr,ProcessHacker.Native.Api.SidAttributes)">
            <summary>
            Copies the specified SID.
            </summary>
            <param name="sid">A pointer to an existing SID.</param>
            <param name="attributes">The attributes associated with the SID.</param>
        </member>
        <member name="M:ProcessHacker.Native.Security.Sid.#ctor(System.IntPtr,ProcessHacker.Native.Api.SidAttributes,System.String)">
            <summary>
            Copies the specified SID.
            </summary>
            <param name="sid">A pointer to an existing SID.</param>
            <param name="attributes">The attributes associated with the SID.</param>
            <param name="systemName">The name of the system on which the SID is located.</param>
        </member>
        <member name="T:ProcessHacker.Native.Security.Privilege">
            <summary>
            Represents a Windows security privilege.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Symbols.SymbolResolveLevel">
            <summary>
            Specifies the detail with which the address's name was resolved.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Symbols.SymbolResolveLevel.Function">
            <summary>
            Indicates that the address was resolved to a module, a function and possibly an offset. 
            For example: mymodule.dll!MyExportedFunction+0x123
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Symbols.SymbolResolveLevel.Module">
            <summary>
            Indicates that the address was resolved to a module and an offset.
            For example: mymodule.dll+0x4321
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Symbols.SymbolResolveLevel.Address">
            <summary>
            Indicates that the address was not resolved.
            For example: 0x12345678
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Symbols.SymbolResolveLevel.Invalid">
            <summary>
            Indicates that the address was invalid (for example, 0x0).
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Threading.CurrentThread">
            <summary>
            Provides methods for manipulating the current thread.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.CurrentThread.Sleep">
            <summary>
            Switches to another thread.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.CurrentThread.Sleep(System.Int32)">
            <summary>
            Suspends execution of the current thread.
            </summary>
            <param name="interval">The interval to sleep, in milliseconds.</param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.CurrentThread.Sleep(System.DateTime)">
            <summary>
            Suspends execution of the current thread.
            </summary>
            <param name="time">The time at which wake up.</param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.CurrentThread.Yield">
            <summary>
            Switches to another thread.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Threading.Event">
            <summary>
            Represents a thread synchronization event.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Event.#ctor">
            <summary>
            Creates an event.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Event.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates an event.
            </summary>
            <param name="autoReset">
            Whether the event should automatically reset to a non-signaled state
            after all waiters are released.
            </param>
            <param name="initialState">
            Whether the event should be set to a signaled state initially.
            </param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Event.#ctor(System.String)">
            <summary>
            Creates or opens an event.
            </summary>
            <param name="name">
            The name of the new event, or the name of an existing event to open.
            </param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Event.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates an event.
            </summary>
            <param name="name">
            The name of the new event.
            </param>
            <param name="autoReset">
            Whether the event should automatically reset to a non-signaled state
            after all waiters are released.
            </param>
            <param name="initialState">
            Whether the event should be set to a signaled state initially.
            </param>
        </member>
        <member name="P:ProcessHacker.Native.Threading.Event.AutoReset">
            <summary>
            Gets whether the event will automatically reset 
            after waiters are released.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Threading.Event.Signaled">
            <summary>
            Gets whether the event is in the signaled state.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Event.Pulse">
            <summary>
            Attempts to satisfy as many waits as possible and sets 
            the event's state to non-signaled.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Event.Reset">
            <summary>
            Sets the event's state to non-signaled.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Event.Set">
            <summary>
            Sets the event's state to signaled.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Threading.EventPair">
            <summary>
            Represents an event pair which contains two events, high and low.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.EventPair.#ctor">
            <summary>
            Creates an event pair.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.EventPair.#ctor(System.String)">
            <summary>
            Creates or opens an event pair.
            </summary>
            <param name="name">
            The name of the new event pair, or the name of an 
            existing event pair.
            </param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.EventPair.SetHigh">
            <summary>
            Sets the high event.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.EventPair.SetHighWaitLow">
            <summary>
            Sets the high event and waits for the low event.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.EventPair.SetLow">
            <summary>
            Sets the low event.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.EventPair.SetLowWaitHigh">
            <summary>
            Sets the low event and waits for the high event.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.EventPair.WaitHigh">
            <summary>
            Waits for the high event.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.EventPair.WaitLow">
            <summary>
            Waits for the low event.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Threading.KeyedEvent">
            <summary>
            Represents a keyed event.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.KeyedEvent.#ctor">
            <summary>
            Creates a new keyed event.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.KeyedEvent.#ctor(System.String)">
            <summary>
            Creates or opens a keyed event.
            </summary>
            <param name="name">
            The name of the new keyed event, or the name of an 
            existing keyed event.
            </param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.KeyedEvent.ReleaseKey(System.Int32)">
            <summary>
            Releases the specified key. If no other thread is waiting 
            on the key, the function blocks until a thread does.
            </summary>
            <param name="key">The key, which must be divisible by 2.</param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.KeyedEvent.ReleaseKey(System.Int32,System.Int32)">
            <summary>
            Releases the specified key. If no other thread is waiting 
            on the key, the function blocks until a thread does.
            </summary>
            <param name="key">The key, which must be divisible by 2.</param>
            <param name="timeout">A timeout value, in milliseconds.</param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.KeyedEvent.ReleaseKey(System.Int32,System.DateTime)">
            <summary>
            Releases the specified key. If no other thread is waiting 
            on the key, the function blocks until a thread does.
            </summary>
            <param name="key">The key, which must be divisible by 2.</param>
            <param name="timeout">A time to wait until.</param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.KeyedEvent.WaitKey(System.Int32)">
            <summary>
            Waits for the specified key to be released.
            </summary>
            <param name="key">The key, which must be divisible by 2.</param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.KeyedEvent.WaitKey(System.Int32,System.Int32)">
            <summary>
            Waits for the specified key to be released.
            </summary>
            <param name="key">The key, which must be divisible by 2.</param>
            <param name="timeout">A time to wait until.</param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.KeyedEvent.WaitKey(System.Int32,System.DateTime)">
            <summary>
            Waits for the specified key to be released.
            </summary>
            <param name="key">The key, which must be divisible by 2.</param>
            <param name="timeout">A time to wait until.</param>
        </member>
        <member name="T:ProcessHacker.Native.Threading.Mutant">
            <summary>
            Represents a mutant which can be used to synchronize access to a shared resource.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Mutant.#ctor">
            <summary>
            Creates a mutant.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Mutant.#ctor(System.Boolean)">
            <summary>
            Creates a mutant.
            </summary>
            <param name="owned">
            Whether the mutant should become owned by the current 
            thread when it is created.
            </param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Mutant.#ctor(System.String)">
            <summary>
            Creates or opens a mutant.
            </summary>
            <param name="name">
            The name of the new mutant, or the name of an existing mutant to open.
            </param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Mutant.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a mutant.
            </summary>
            <param name="name">
            The name of the new mutant.
            </param>
            <param name="owned">
            Whether the mutant should become owned by the current 
            thread when it is created.
            </param>
        </member>
        <member name="P:ProcessHacker.Native.Threading.Mutant.Owned">
            <summary>
            Gets whether the mutant is currently owned.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Mutant.Release">
            <summary>
            Releases the mutant, allowing other waiting threads to own it.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.Threading.Semaphore">
            <summary>
            Represents a semaphore which can be used to control access to a shared resource.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Semaphore.#ctor">
            <summary>
            Creates a binary semaphore.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Semaphore.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a binary semaphore.
            </summary>
            <param name="initialCount">The initial count of the semaphore.</param>
            <param name="maximumCount">The maximum count of the semaphore.</param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Semaphore.#ctor(System.String)">
            <summary>
            Creates or opens a semaphore.
            </summary>
            <param name="name">
            The name of the new semaphore, or the name of an existing semaphore.
            </param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Semaphore.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a semaphore.
            </summary>
            <param name="name">The name of the new semaphore.</param>
            <param name="initialCount">The initial count of the semaphore.</param>
            <param name="maximumCount">The maximum count of the semaphore.</param>
        </member>
        <member name="P:ProcessHacker.Native.Threading.Semaphore.Count">
            <summary>
            Gets the current count of the semaphore.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Threading.Semaphore.MaximumCount">
            <summary>
            Gets the maximum count of the semaphore.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Semaphore.Release">
            <summary>
            Releases the semaphore, incrementing the count.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Semaphore.Release(System.Int32)">
            <summary>
            Releases the semaphore, incrementing the count by the 
            specified amount.
            </summary>
            <param name="count">The amount to increment the count by.</param>
        </member>
        <member name="T:ProcessHacker.Native.Threading.TimerCallback">
            <summary>
            Represents a callback to be called when a timer is signaled.
            </summary>
            <param name="context">The context passed when the timer was set.</param>
        </member>
        <member name="T:ProcessHacker.Native.Threading.Timer">
            <summary>
            Represents a timer.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Timer.#ctor">
            <summary>
            Creates a timer.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Timer.#ctor(System.Boolean)">
            <summary>
            Creates a timer.
            </summary>
            <param name="autoReset">
            Whether the timer should automatically reset to a 
            non-signaled state after waiters have been released.
            </param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Timer.#ctor(System.String)">
            <summary>
            Creates or opens a timer.
            </summary>
            <param name="name">
            The name of the new timer, or the name of an existing timer.
            </param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Timer.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a timer.
            </summary>
            <param name="name">The name of the new timer.</param>
            <param name="autoReset">
            Whether the timer should automatically reset to a 
            non-signaled state after waiters have been released.
            </param>
        </member>
        <member name="P:ProcessHacker.Native.Threading.Timer.RemainingTime">
            <summary>
            Gets the remaining time before the timer is signaled.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Threading.Timer.Signaled">
            <summary>
            Gets whether the timer is signaled.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Timer.Cancel">
            <summary>
            Cancels the timer, preventing it from being signaled.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Timer.Set(System.Int32)">
            <summary>
            Starts the timer.
            </summary>
            <param name="dueTime">The due time, in milliseconds.</param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Timer.Set(System.Int32,System.Int32)">
            <summary>
            Starts the timer.
            </summary>
            <param name="dueTime">The due time, in milliseconds.</param>
            <param name="period">The interval to use for periodic signaling, in milliseconds.</param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Timer.Set(ProcessHacker.Native.Threading.TimerCallback,System.Int32,System.Int32)">
            <summary>
            Starts the timer.
            </summary>
            <param name="callback">A function to be called when the timer is signaled.</param>
            <param name="dueTime">The due time, in milliseconds.</param>
            <param name="period">The interval to use for periodic signaling, in milliseconds.</param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Timer.Set(ProcessHacker.Native.Threading.TimerCallback,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Starts the timer.
            </summary>
            <param name="callback">A function to be called when the timer is signaled.</param>
            <param name="dueTime">The due time, in milliseconds.</param>
            <param name="period">The interval to use for periodic signaling, in milliseconds.</param>
            <param name="context">A value to pass to the callback function.</param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Timer.Set(System.DateTime)">
            <summary>
            Starts the timer.
            </summary>
            <param name="dueTime">The time at which the timer will be signaled.</param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Timer.Set(System.DateTime,System.Int32)">
            <summary>
            Starts the timer.
            </summary>
            <param name="dueTime">The time at which the timer will be signaled.</param>
            <param name="period">The interval to use for periodic signaling, in milliseconds.</param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Timer.Set(ProcessHacker.Native.Threading.TimerCallback,System.DateTime,System.Int32)">
            <summary>
            Starts the timer.
            </summary>
            <param name="callback">A function to be called when the timer is signaled.</param>
            <param name="dueTime">The time at which the timer will be signaled.</param>
            <param name="period">The interval to use for periodic signaling, in milliseconds.</param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Timer.Set(ProcessHacker.Native.Threading.TimerCallback,System.DateTime,System.Int32,System.IntPtr)">
            <summary>
            Starts the timer.
            </summary>
            <param name="callback">A function to be called when the timer is signaled.</param>
            <param name="dueTime">The time at which the timer will be signaled.</param>
            <param name="period">The interval to use for periodic signaling, in milliseconds.</param>
            <param name="context">A value to pass to the callback function.</param>
        </member>
        <member name="T:ProcessHacker.Native.Threading.Waiter">
            <summary>
            Provides methods for waiting on dispatcher objects.
            </summary>
        </member>
        <member name="E:ProcessHacker.Native.Threading.Waiter.ObjectSignaled">
            <summary>
            Raised when an object is signaled.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Waiter.#ctor">
            <summary>
            Creates a waiter.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Waiter.Add(ProcessHacker.Native.Objects.ISynchronizable)">
            <summary>
            Adds an object for the waiter to wait on.
            </summary>
            <param name="obj">The object to wait for.</param>
        </member>
        <member name="M:ProcessHacker.Native.Threading.Waiter.Remove(ProcessHacker.Native.Objects.ISynchronizable)">
            <summary>
            Removes an object the waiter is waiting on.
            </summary>
            <param name="obj">An object which is currently being waited on.</param>
            <returns>Whether the object was successfully removed.</returns>
        </member>
        <member name="T:ProcessHacker.Native.FileUtils">
            <summary>
            Provides utility methods for managing files.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.FileUtils._fileNamePrefixes">
            <summary>
            Used to resolve device prefixes (\Device\Harddisk1) into DOS drive names.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.KProcessHacker">
            <summary>
            Provides an interface to KProcessHacker.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.KProcessHacker.Control">
            <summary>
            A control code used by KProcessHacker to represent a specific function.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.KProcessHacker.#ctor">
            <summary>
            Creates a connection to KProcessHacker.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.KProcessHacker.#ctor(System.String)">
            <summary>
            Creates a connection to KProcessHacker.
            </summary>
            <param name="deviceName">The name of the KProcessHacker service and device.</param>
        </member>
        <member name="M:ProcessHacker.Native.KProcessHacker.#ctor(System.String,System.String)">
            <summary>
            Creates a connection to KProcessHacker.
            </summary>
            <param name="deviceName">The name of the KProcessHacker service and device.</param>
            <param name="fileName">The file name of the KProcessHacker driver.</param>
        </member>
        <member name="M:ProcessHacker.Native.KProcessHacker.Close">
            <summary>
            Closes the connection to KProcessHacker.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.LocalMemoryAlloc">
            <summary>
            Represents a LocalAlloc() memory allocation.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.PebMemoryAlloc">
            <summary>
            Represents a memory allocation from the PEB.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.SectionView">
            <summary>
            Represents a mapped view of a section.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.SectionView.Flush">
            <summary>
            Flushes the section view.
            </summary>
            <returns>A NT status value.</returns>
        </member>
        <member name="M:ProcessHacker.Native.SectionView.IsSameFile(ProcessHacker.Native.SectionView)">
            <summary>
            Determines whether the image section is the same as 
            another file section.
            </summary>
            <param name="mappedAsFile">A section mapped as a file.</param>
            <returns>Whether the two sections are the same.</returns>
        </member>
        <member name="T:ProcessHacker.Native.LsaMemoryAlloc">
            <summary>
            Represents a memory allocation managed by the Local Security Authority (LSA).
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.LsaMemoryAlloc.#ctor(System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Creates a memory allocation from an existing LSA managed allocation. 
            </summary>
            <param name="memory">A pointer to the allocated memory.</param>
            <param name="secur32">True if the memory was allocated by secur32, otherwise false.</param>
            <param name="owned">Whether the memory allocation should be freed automatically.</param>
        </member>
        <member name="T:ProcessHacker.Native.MemoryAlloc">
            <summary>
            Represents an unmanaged memory allocation from the heap.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.MemoryAlloc.#ctor">
            <summary>
            Creates a new, invalid memory allocation. 
            You must set the pointer using the Memory property.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.MemoryAlloc.#ctor(System.Int32)">
            <summary>
            Creates a new memory allocation with the specified size.
            </summary>
            <param name="size">The amount of memory, in bytes, to allocate.</param>
        </member>
        <member name="M:ProcessHacker.Native.MemoryAlloc.#ctor(System.Int32,ProcessHacker.Native.Api.HeapFlags)">
            <summary>
            Creates a new memory allocation with the specified size.
            </summary>
            <param name="size">The amount of memory, in bytes, to allocate.</param>
            <param name="flags">Any flags to use.</param>
        </member>
        <member name="M:ProcessHacker.Native.MemoryAlloc.Resize(System.Int32)">
            <summary>
            Resizes the memory allocation.
            </summary>
            <param name="newSize">The new size of the allocation.</param>
        </member>
        <member name="M:ProcessHacker.Native.MemoryAlloc.ResizeNew(System.Int32)">
            <summary>
            Resizes the memory allocation without retaining the contents 
            of the allocated memory.
            </summary>
            <param name="newSize">The new size of the allocation.</param>
        </member>
        <member name="T:ProcessHacker.Native.WtsMemoryAlloc">
            <summary>
            Represents a memory allocation managed by the Terminal Server API.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.WtsMemoryAlloc.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Creates a memory allocation from an existing Terminal Server managed allocation. 
            </summary>
            <param name="memory">A pointer to the allocated memory.</param>
            <param name="owned">Whether the memory allocation should be freed automatically.</param>
        </member>
        <member name="F:ProcessHacker.Native.Ui.ChooseProcessDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Ui.ChooseProcessDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ProcessHacker.Native.Ui.ChooseProcessDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Ui.HandlePropertiesWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Ui.HandlePropertiesWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ProcessHacker.Native.Ui.HandlePropertiesWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.NativeObject.Dispose">
            <summary>
            Closes the reference to the object.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.NativeObject.Handle">
            <summary>
            Gets the underlying handle for the object.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.NativeObject.SignalAndWait(ProcessHacker.Native.NativeObject)">
            <summary>
            Signals the object and waits for another.
            </summary>
            <param name="obj">The object to wait for.</param>
        </member>
        <member name="M:ProcessHacker.Native.NativeObject.SignalAndWait(ProcessHacker.Native.NativeObject,System.Int32)">
            <summary>
            Signals the object and waits for another.
            </summary>
            <param name="obj">The object to wait for.</param>
            <param name="timeout">A timeout value, in milliseconds.</param>
        </member>
        <member name="M:ProcessHacker.Native.NativeObject.SignalAndWait(ProcessHacker.Native.NativeObject,System.DateTime)">
            <summary>
            Signals the object and waits for another.
            </summary>
            <param name="obj">The object to wait for.</param>
            <param name="timeout">A time to wait until.</param>
        </member>
        <member name="M:ProcessHacker.Native.NativeObject.Wait">
            <summary>
            Waits for the object to be signaled.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.NativeObject.Wait(System.Int32)">
            <summary>
            Waits for the object to be signaled.
            </summary>
            <param name="timeout">A timeout value, in milliseconds.</param>
        </member>
        <member name="M:ProcessHacker.Native.NativeObject.Wait(System.DateTime)">
            <summary>
            Waits for the object to be signaled.
            </summary>
            <param name="timeout">A time to wait until.</param>
        </member>
        <member name="T:ProcessHacker.Native.Windows">
            <summary>
            Provides methods for manipulating the operating system.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.Windows.ObjectTypes">
            <summary>
            A cache for type names; QuerySystemInformation with ALL_TYPES_INFORMATION fails for some 
            reason. The dictionary relates object type numbers to their names.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Windows.NumberOfProcessors">
            <summary>
            Gets the number of active processors.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Windows.PageSize">
            <summary>
            Gets the page size.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Windows.KernelBase">
            <summary>
            Gets the base address of the kernel.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.Windows.KernelFileName">
            <summary>
            Gets the file name of the kernel.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.Windows.BytesToPages(System.Int32)">
            <summary>
            Gets the number of pages needed to store the 
            specified number of bytes.
            </summary>
            <param name="bytes">The number of bytes.</param>
            <returns>The number of pages needed.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Windows.EnumKernelModules(ProcessHacker.Native.Windows.EnumKernelModulesDelegate)">
            <summary>
            Enumerates the modules loaded by the kernel.
            </summary>
            <param name="enumCallback">A callback for the enumeration.</param>
        </member>
        <member name="M:ProcessHacker.Native.Windows.GetBasicInformation">
            <summary>
            Gets basic information about the system.
            </summary>
            <returns>A structure containing basic information.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Windows.GetHandles">
            <summary>
            Enumerates the handles opened by every running process.
            </summary>
            <returns>An array containing information about the handles.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Windows.GetKernelBase">
            <summary>
            Gets the base address of the currently running kernel.
            </summary>
            <returns>The kernel's base address.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Windows.GetKernelFileName">
            <summary>
            Gets the file name of the currently running kernel.
            </summary>
            <returns>The kernel file name.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Windows.GetKernelModules">
            <summary>
            Gets the modules loaded by the kernel.
            </summary>
            <returns>A collection of module information structures.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Windows.GetNetworkConnections">
            <summary>
            Gets the network connections currently active.
            </summary>
            <returns>A dictionary of network connections.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Windows.GetPagefiles">
            <summary>
            Gets the page files currently active.
            </summary>
            <returns>A collection of page file information structures.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Windows.GetProcesses">
            <summary>
            Gets a dictionary containing the currently running processes.
            </summary>
            <returns>A dictionary, indexed by process ID.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Windows.GetProcesses(System.Boolean)">
            <summary>
            Gets a dictionary containing the currently running processes.
            </summary>
            <param name="getThreads">Whether to get thread information.</param>
            <returns>A dictionary, indexed by process ID.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Windows.GetProcessThreads(System.Int32)">
            <summary>
            Gets a dictionary containing the threads owned by the specified process.
            </summary>
            <param name="pid">A process ID.</param>
            <returns>A dictionary, indexed by thread ID.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Windows.GetServices">
            <summary>
            Gets a dictionary containing the services on the system.
            </summary>
            <returns>A dictionary, indexed by service name.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Windows.GetTickCount">
            <summary>
            Gets the 64-bit tick count.
            </summary>
            <returns>A 64-bit tick count.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Windows.GetTimeOfDay">
            <summary>
            Gets information about the system time.
            </summary>
            <returns>A time of day structure.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Windows.GetUptime">
            <summary>
            Gets the uptime of the system.
            </summary>
            <returns>A time span describing the time elapsed since the system was booted.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Windows.LoadDriver(System.String)">
            <summary>
            Loads a driver.
            </summary>
            <param name="serviceName">The service name of the driver.</param>
        </member>
        <member name="M:ProcessHacker.Native.Windows.QueryKSystemTime(System.IntPtr)">
            <summary>
            Reads a KSYSTEM_TIME value atomically.
            </summary>
            <param name="time">A pointer to a KSYSTEM_TIME value.</param>
            <returns>A 64-bit time value.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Windows.QueryKSystemTime(ProcessHacker.Native.Api.KSystemTime*)">
            <summary>
            Reads a KSYSTEM_TIME value atomically.
            </summary>
            <param name="time">A pointer to a KSYSTEM_TIME value.</param>
            <returns>A 64-bit time value.</returns>
        </member>
        <member name="M:ProcessHacker.Native.Windows.UnloadDriver(System.String)">
            <summary>
            Unloads a driver.
            </summary>
            <param name="serviceName">The service name of the driver.</param>
        </member>
        <member name="P:ProcessHacker.Native.KernelModule.BaseAddress">
            <summary>
            The base address of the module.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.KernelModule.Size">
            <summary>
            The size of the module.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.KernelModule.Flags">
            <summary>
            The flags set by the loader for this module.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.KernelModule.BaseName">
            <summary>
            The base name of the module (e.g. module.dll).
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.KernelModule.FileName">
            <summary>
            The file name of the module (e.g. C:\Windows\system32\module.dll).
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.WindowsVersion.TwoThousand">
            <summary>
            Windows 2000.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.WindowsVersion.XP">
            <summary>
            Windows XP.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.WindowsVersion.Server2003">
            <summary>
            Windows Server 2003.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.WindowsVersion.Vista">
            <summary>
            Windows Vista, Windows Server 2008.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.WindowsVersion.Seven">
            <summary>
            Windows 7, Windows Server 2008 R2.
            </summary>
        </member>
        <member name="F:ProcessHacker.Native.WindowsVersion.Unknown">
            <summary>
            An unknown version of Windows.
            </summary>
        </member>
        <member name="T:ProcessHacker.Native.WindowsException">
            <summary>
            Represents a Win32 or Native exception.
            </summary>
            <remarks>
            Unlike the System.ComponentModel.Win32Exception class, 
            this class does not get the error's associated 
            message unless it is requested.
            </remarks>
        </member>
        <member name="M:ProcessHacker.Native.WindowsException.#ctor">
            <summary>
            Creates an exception with no error.
            </summary>
        </member>
        <member name="M:ProcessHacker.Native.WindowsException.#ctor(ProcessHacker.Native.Api.Win32Error)">
            <summary>
            Creates an exception from a Win32 error code.
            </summary>
            <param name="errorCode">The Win32 error code.</param>
        </member>
        <member name="M:ProcessHacker.Native.WindowsException.#ctor(ProcessHacker.Native.Api.NtStatus)">
            <summary>
            Creates an exception from a NT status value.
            </summary>
            <param name="status">The NT status value.</param>
        </member>
        <member name="P:ProcessHacker.Native.WindowsException.IsNtStatus">
            <summary>
            Gets whether the NT status value is valid.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.WindowsException.ErrorCode">
            <summary>
            Gets a Win32 error code which represents the exception.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.WindowsException.Status">
            <summary>
            Gets a NT status value which represents the exception.
            </summary>
        </member>
        <member name="P:ProcessHacker.Native.WindowsException.Message">
            <summary>
            Gets a message describing the exception.
            </summary>
        </member>
    </members>
</doc>
